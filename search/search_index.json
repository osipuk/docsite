{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Create Account This object is used to access the Account lookup table. Create an Account if Account does not already exist. URL : /api/account Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Require Type Description strCode Yes String A unique code for referencing the account. strDescription Yes String A short text describing the account. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 56 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strCode is required } { msg : Create failed } Get all Account list Get the all registered Account list. URL : /api/account Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Account list found! , data : [ { _id : 45 , strCode : A45 , strDescription : String __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update Account Update the Account by Id URL : /api/account/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the account. Param Require Type Description strCode Yes String A unique code for referencing the account. strDescription Yes String A short text describing the account. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed } Get Single Account By Id Get a single Account by id if current Account was registered on it. URL : /api/account/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the account. Success Response: Code : 200 success Resonse example { msg : Found! , data : { _id : 54 , strCode : 34 , strDescription : String intUpdated :2020-11-26T10:42:25.136+00:00 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If workorder does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null } Delete Account Delete a Account by Id URL : /api/account/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the account. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Account"},{"location":"index.html#create-account","text":"This object is used to access the Account lookup table. Create an Account if Account does not already exist. URL : /api/account Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Require Type Description strCode Yes String A unique code for referencing the account. strDescription Yes String A short text describing the account. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 56 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strCode is required } { msg : Create failed }","title":"Create Account"},{"location":"index.html#get-all-account-list","text":"Get the all registered Account list. URL : /api/account Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Account list found! , data : [ { _id : 45 , strCode : A45 , strDescription : String __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all Account list"},{"location":"index.html#update-account","text":"Update the Account by Id URL : /api/account/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the account. Param Require Type Description strCode Yes String A unique code for referencing the account. strDescription Yes String A short text describing the account. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed }","title":"Update Account"},{"location":"index.html#get-single-account-by-id","text":"Get a single Account by id if current Account was registered on it. URL : /api/account/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the account. Success Response: Code : 200 success Resonse example { msg : Found! , data : { _id : 54 , strCode : 34 , strDescription : String intUpdated :2020-11-26T10:42:25.136+00:00 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If workorder does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null }","title":"Get Single Account By Id"},{"location":"index.html#delete-account","text":"Delete a Account by Id URL : /api/account/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the account. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete Account"},{"location":"Account/index.html","text":"Create Account This object is used to access the Account lookup table. Create an Account if Account does not already exist. URL : /api/account Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Require Type Description strCode Yes String A unique code for referencing the account. strDescription Yes String A short text describing the account. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 56 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strCode is required } { msg : Create failed } Get all Account list Get the all registered Account list. URL : /api/account Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Account list found! , data : [ { _id : 45 , strCode : A45 , strDescription : String __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update Account Update the Account by Id URL : /api/account/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the account. Param Require Type Description strCode Yes String A unique code for referencing the account. strDescription Yes String A short text describing the account. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed } Get Single Account By Id Get a single Account by id if current Account was registered on it. URL : /api/account/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the account. Success Response: Code : 200 success Resonse example { msg : Found! , data : { _id : 54 , strCode : 34 , strDescription : String intUpdated :2020-11-26T10:42:25.136+00:00 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If workorder does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null } Delete Account Delete a Account by Id URL : /api/account/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the account. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Create Account"},{"location":"Account/index.html#create-account","text":"This object is used to access the Account lookup table. Create an Account if Account does not already exist. URL : /api/account Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Require Type Description strCode Yes String A unique code for referencing the account. strDescription Yes String A short text describing the account. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 56 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strCode is required } { msg : Create failed }","title":"Create Account"},{"location":"Account/index.html#get-all-account-list","text":"Get the all registered Account list. URL : /api/account Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Account list found! , data : [ { _id : 45 , strCode : A45 , strDescription : String __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all Account list"},{"location":"Account/index.html#update-account","text":"Update the Account by Id URL : /api/account/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the account. Param Require Type Description strCode Yes String A unique code for referencing the account. strDescription Yes String A short text describing the account. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed }","title":"Update Account"},{"location":"Account/index.html#get-single-account-by-id","text":"Get a single Account by id if current Account was registered on it. URL : /api/account/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the account. Success Response: Code : 200 success Resonse example { msg : Found! , data : { _id : 54 , strCode : 34 , strDescription : String intUpdated :2020-11-26T10:42:25.136+00:00 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If workorder does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null }","title":"Get Single Account By Id"},{"location":"Account/index.html#delete-account","text":"Delete a Account by Id URL : /api/account/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the account. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete Account"},{"location":"Asset/index.html","text":"Create Asset This object is used to represent the assets that are to be managed by the CMMS : these can be equipments, locations and facilities, or tools Create an Asset if Asset does not already exist. URL : /api/assets Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description strName String Display name of the asset. strDescription String A short text describing the asset. strMake String For equipment or tools, this field can be used to store the brand's name of the asset. strMake String For equipment or tools, this field can be used to store the brand's name of the asset. strModel String For equipment or tools, this field can be used to store the model's name of the asset. qtyMinStockCount integer Mininum stock count for the asset. strCity String The city the asset is located into. strShippingTerms String This field can be used to add comments about the shipping terms of the asset. For example : \"Item is heavier than 20kg and must be delivered before 10AM.\" strAddress String Street number and street name of the address the asset is located at. strNotes String This field can be used to store additional details about the asset like the name of its supplier, a voltage range or dimensions for example. strProvince String Code or full name of the province the asset is located at. intCountryID integer The ID of the country the asset is located at. For example : 124 for Canada or 840 for United States of America. For getting all possible values, please refer to the Country section. strInventoryCode String This field can be used to store an inventory code for the asset. qtyStockCount Integer Indicates the current stock count for the asset. intSiteID Integer For multi-sites tenants, the ID of the site where the asset is located at. strRow String The row where the asset is located at in a facility. strMASourceProduct string A JSON formatted string giving details about an asset coming from MA Source. strAisle string The aisle where the asset is located at in a facility. strBinNumber string The number of the bin where the asset is stored. intCategoryID Integer The ID of the category the asset is directly attached to. strPostalCode string The postal code of the address the asset is located at. strSerialNumber string This field can be used to store the serial number of the asset. strCode string This field can be used to define a code associated with the asset. dblLatitude Double The latitude of the geographic location of the asset. dblLongitude Double The longitude of the geographic location of the asset. strUnspcCode String This field can be used to store the United Nations Standard Products and Services Code of the asset. dblLastPrice Double Last Purchase Price Per Unit on Asset bolIsBillToFacility Boolean If set to true, indicates that invoices for assets (usually parts/supplies) should be sent to this facility. intAssetLocationID Integer An integer uniquely defining the location of asset. Refers to Asset with an asset category as Locations And Facilities bolIsOnline Boolean A boolean value representing if the related Asset is online or offline, 1 or 0 respectively. bolIsShippingOrReceivingFacility Boolean A boolean that identifies whether a facility ships or receives assets (usually parts/supplies). strQuotingTerms Boolean Quoting terms that are automatically added to RFQs where shipping is indicated for Asset type Facility. intAssetParentID Integer An integer that uniquely identifies the parent of Asset. intAccountID Integer An integer unitquely defining the Account. intChargeDepartmentID Integer An integer uniquely defining the Charge Department intSuperCategorySysCode Integer Asset Category SysCode for Region or a Site strBarcode Integer For equipment or tools, this field can be used to store the bar code's value of the asset. Data example { strFullName : strFullName of Asset , strDescription : Asset_Desc_Name , strMake : Asset_Make_Name , strModel : Asset_Model_Name , qtyStockCount : 4 ... ... } Success Response: Code : 200 success Resonse example { msg : Asset added successfully! , data : {id: 4rt8a89c24753232419483c } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed } Get all asset list Get the all registered asset list. URL : /api/assets Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Asset list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , strName : strName , strDescription : strDescription , strMake : strMake , strModel : strModel , qtyMinStockCount : 23, strCity : strCity , strShippingTerms : strShippingTerms , strAddress : strAddress , strNotes : , strProvince : , intCountryID : 45, strInventoryCode : , qtyStockCount : 11, intSiteID : 329, strRow : , strMASourceProduct : , strAisle : , strBinNumber : , intCategoryID : 32, strPostalCode : , strSerialNumber : , strCode : , dblLatitude : 0.114573, dblLongitude : 4.2587, strUnspcCode : , dblLastPrice : 4.5, bolIsBillToFacility : false, intAssetLocationID : 886, bolIsOnline : false, bolIsShippingOrReceivingFacility : false, strQuotingTerms : , intAssetParentID : null, intAccountID : null, intChargeDepartmentID : null, intSuperCategorySysCode : null, strBarcode : , __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update Asset Update the Asset by Id URL : /api/assets/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the asset. Param Type Description strName String Display name of the asset. strDescription String A short text describing the asset. strMake String For equipment or tools, this field can be used to store the brand's name of the asset. strMake String For equipment or tools, this field can be used to store the brand's name of the asset. strModel String For equipment or tools, this field can be used to store the model's name of the asset. qtyMinStockCount integer Mininum stock count for the asset. strCity String The city the asset is located into. strShippingTerms String This field can be used to add comments about the shipping terms of the asset. For example : \"Item is heavier than 20kg and must be delivered before 10AM.\" strAddress String Street number and street name of the address the asset is located at. strNotes String This field can be used to store additional details about the asset like the name of its supplier, a voltage range or dimensions for example. strProvince String Code or full name of the province the asset is located at. intCountryID integer The ID of the country the asset is located at. For example : 124 for Canada or 840 for United States of America. For getting all possible values, please refer to the Country section. strInventoryCode String This field can be used to store an inventory code for the asset. qtyStockCount Integer Indicates the current stock count for the asset. intSiteID Integer For multi-sites tenants, the ID of the site where the asset is located at. strRow String The row where the asset is located at in a facility. strMASourceProduct string A JSON formatted string giving details about an asset coming from MA Source. strAisle string The aisle where the asset is located at in a facility. strBinNumber string The number of the bin where the asset is stored. intCategoryID Integer The ID of the category the asset is directly attached to. strPostalCode string The postal code of the address the asset is located at. strSerialNumber string This field can be used to store the serial number of the asset. strCode string This field can be used to define a code associated with the asset. dblLatitude Double The latitude of the geographic location of the asset. dblLongitude Double The longitude of the geographic location of the asset. strUnspcCode String This field can be used to store the United Nations Standard Products and Services Code of the asset. dblLastPrice Double Last Purchase Price Per Unit on Asset bolIsBillToFacility Boolean If set to true, indicates that invoices for assets (usually parts/supplies) should be sent to this facility. intAssetLocationID Integer An integer uniquely defining the location of asset. Refers to Asset with an asset category as Locations And Facilities bolIsOnline Boolean A boolean value representing if the related Asset is online or offline, 1 or 0 respectively. bolIsShippingOrReceivingFacility Boolean A boolean that identifies whether a facility ships or receives assets (usually parts/supplies). strQuotingTerms Boolean Quoting terms that are automatically added to RFQs where shipping is indicated for Asset type Facility. intAssetParentID Integer An integer that uniquely identifies the parent of Asset. intAccountID Integer An integer unitquely defining the Account. intChargeDepartmentID Integer An integer uniquely defining the Charge Department intSuperCategorySysCode Integer Asset Category SysCode for Region or a Site strBarcode Integer For equipment or tools, this field can be used to store the bar code's value of the asset. *Data example { strFullName : strFullName of Asset , strDescription : Asset_Desc_Name , strMake : Asset_Make_Name , strModel : Asset_Model_Name , qtyStockCount : 4 ... ... } Success Response Code : 200 success Resonse example { msg : Asset updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed } Get Single Asset By Id Get a single Asset by id if current asset was registered on it. URL : /api/assets/:assetid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the asset. Success Response: Code : 200 success Resonse example { msg : Asset found! , data : { _id : 5f6896897b9884253cf6bdb6 , strName : strName , strDescription : strDescription , strMake : strMake , strModel : strModel , qtyMinStockCount : 23, strCity : strCity , strShippingTerms : strShippingTerms , strAddress : strAddress , strNotes : , strProvince : , intCountryID : 45, strInventoryCode : , qtyStockCount : 11, intSiteID : 329, strRow : , strMASourceProduct : , strAisle : , strBinNumber : , intCategoryID : 32, strPostalCode : , strSerialNumber : , strCode : , dblLatitude : 0.114573, dblLongitude : 4.2587, strUnspcCode : , dblLastPrice : 4.5, bolIsBillToFacility : false, intAssetLocationID : 886, bolIsOnline : false, bolIsShippingOrReceivingFacility : false, strQuotingTerms : , intAssetParentID : null, intAccountID : null, intChargeDepartmentID : null, intSuperCategorySysCode : null, strBarcode : , __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If asset does not exist on server. Code : 404 Not Found Content example { msg : Asset not found , data :null } Delete Asset Delete the Asset by Id URL : /api/assets/:assetid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the asset. Success Response Code : 200 success Resonse example { msg : Asset deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Asset"},{"location":"Asset/index.html#create-asset","text":"This object is used to represent the assets that are to be managed by the CMMS : these can be equipments, locations and facilities, or tools Create an Asset if Asset does not already exist. URL : /api/assets Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description strName String Display name of the asset. strDescription String A short text describing the asset. strMake String For equipment or tools, this field can be used to store the brand's name of the asset. strMake String For equipment or tools, this field can be used to store the brand's name of the asset. strModel String For equipment or tools, this field can be used to store the model's name of the asset. qtyMinStockCount integer Mininum stock count for the asset. strCity String The city the asset is located into. strShippingTerms String This field can be used to add comments about the shipping terms of the asset. For example : \"Item is heavier than 20kg and must be delivered before 10AM.\" strAddress String Street number and street name of the address the asset is located at. strNotes String This field can be used to store additional details about the asset like the name of its supplier, a voltage range or dimensions for example. strProvince String Code or full name of the province the asset is located at. intCountryID integer The ID of the country the asset is located at. For example : 124 for Canada or 840 for United States of America. For getting all possible values, please refer to the Country section. strInventoryCode String This field can be used to store an inventory code for the asset. qtyStockCount Integer Indicates the current stock count for the asset. intSiteID Integer For multi-sites tenants, the ID of the site where the asset is located at. strRow String The row where the asset is located at in a facility. strMASourceProduct string A JSON formatted string giving details about an asset coming from MA Source. strAisle string The aisle where the asset is located at in a facility. strBinNumber string The number of the bin where the asset is stored. intCategoryID Integer The ID of the category the asset is directly attached to. strPostalCode string The postal code of the address the asset is located at. strSerialNumber string This field can be used to store the serial number of the asset. strCode string This field can be used to define a code associated with the asset. dblLatitude Double The latitude of the geographic location of the asset. dblLongitude Double The longitude of the geographic location of the asset. strUnspcCode String This field can be used to store the United Nations Standard Products and Services Code of the asset. dblLastPrice Double Last Purchase Price Per Unit on Asset bolIsBillToFacility Boolean If set to true, indicates that invoices for assets (usually parts/supplies) should be sent to this facility. intAssetLocationID Integer An integer uniquely defining the location of asset. Refers to Asset with an asset category as Locations And Facilities bolIsOnline Boolean A boolean value representing if the related Asset is online or offline, 1 or 0 respectively. bolIsShippingOrReceivingFacility Boolean A boolean that identifies whether a facility ships or receives assets (usually parts/supplies). strQuotingTerms Boolean Quoting terms that are automatically added to RFQs where shipping is indicated for Asset type Facility. intAssetParentID Integer An integer that uniquely identifies the parent of Asset. intAccountID Integer An integer unitquely defining the Account. intChargeDepartmentID Integer An integer uniquely defining the Charge Department intSuperCategorySysCode Integer Asset Category SysCode for Region or a Site strBarcode Integer For equipment or tools, this field can be used to store the bar code's value of the asset. Data example { strFullName : strFullName of Asset , strDescription : Asset_Desc_Name , strMake : Asset_Make_Name , strModel : Asset_Model_Name , qtyStockCount : 4 ... ... } Success Response: Code : 200 success Resonse example { msg : Asset added successfully! , data : {id: 4rt8a89c24753232419483c } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strFullName is required } { msg : update failed }","title":"Create Asset"},{"location":"Asset/index.html#get-all-asset-list","text":"Get the all registered asset list. URL : /api/assets Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Asset list found! , data : [ { _id : 5f6896897b9884253cf6bdb6 , strName : strName , strDescription : strDescription , strMake : strMake , strModel : strModel , qtyMinStockCount : 23, strCity : strCity , strShippingTerms : strShippingTerms , strAddress : strAddress , strNotes : , strProvince : , intCountryID : 45, strInventoryCode : , qtyStockCount : 11, intSiteID : 329, strRow : , strMASourceProduct : , strAisle : , strBinNumber : , intCategoryID : 32, strPostalCode : , strSerialNumber : , strCode : , dblLatitude : 0.114573, dblLongitude : 4.2587, strUnspcCode : , dblLastPrice : 4.5, bolIsBillToFacility : false, intAssetLocationID : 886, bolIsOnline : false, bolIsShippingOrReceivingFacility : false, strQuotingTerms : , intAssetParentID : null, intAccountID : null, intChargeDepartmentID : null, intSuperCategorySysCode : null, strBarcode : , __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all asset list"},{"location":"Asset/index.html#update-asset","text":"Update the Asset by Id URL : /api/assets/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the asset. Param Type Description strName String Display name of the asset. strDescription String A short text describing the asset. strMake String For equipment or tools, this field can be used to store the brand's name of the asset. strMake String For equipment or tools, this field can be used to store the brand's name of the asset. strModel String For equipment or tools, this field can be used to store the model's name of the asset. qtyMinStockCount integer Mininum stock count for the asset. strCity String The city the asset is located into. strShippingTerms String This field can be used to add comments about the shipping terms of the asset. For example : \"Item is heavier than 20kg and must be delivered before 10AM.\" strAddress String Street number and street name of the address the asset is located at. strNotes String This field can be used to store additional details about the asset like the name of its supplier, a voltage range or dimensions for example. strProvince String Code or full name of the province the asset is located at. intCountryID integer The ID of the country the asset is located at. For example : 124 for Canada or 840 for United States of America. For getting all possible values, please refer to the Country section. strInventoryCode String This field can be used to store an inventory code for the asset. qtyStockCount Integer Indicates the current stock count for the asset. intSiteID Integer For multi-sites tenants, the ID of the site where the asset is located at. strRow String The row where the asset is located at in a facility. strMASourceProduct string A JSON formatted string giving details about an asset coming from MA Source. strAisle string The aisle where the asset is located at in a facility. strBinNumber string The number of the bin where the asset is stored. intCategoryID Integer The ID of the category the asset is directly attached to. strPostalCode string The postal code of the address the asset is located at. strSerialNumber string This field can be used to store the serial number of the asset. strCode string This field can be used to define a code associated with the asset. dblLatitude Double The latitude of the geographic location of the asset. dblLongitude Double The longitude of the geographic location of the asset. strUnspcCode String This field can be used to store the United Nations Standard Products and Services Code of the asset. dblLastPrice Double Last Purchase Price Per Unit on Asset bolIsBillToFacility Boolean If set to true, indicates that invoices for assets (usually parts/supplies) should be sent to this facility. intAssetLocationID Integer An integer uniquely defining the location of asset. Refers to Asset with an asset category as Locations And Facilities bolIsOnline Boolean A boolean value representing if the related Asset is online or offline, 1 or 0 respectively. bolIsShippingOrReceivingFacility Boolean A boolean that identifies whether a facility ships or receives assets (usually parts/supplies). strQuotingTerms Boolean Quoting terms that are automatically added to RFQs where shipping is indicated for Asset type Facility. intAssetParentID Integer An integer that uniquely identifies the parent of Asset. intAccountID Integer An integer unitquely defining the Account. intChargeDepartmentID Integer An integer uniquely defining the Charge Department intSuperCategorySysCode Integer Asset Category SysCode for Region or a Site strBarcode Integer For equipment or tools, this field can be used to store the bar code's value of the asset. *Data example { strFullName : strFullName of Asset , strDescription : Asset_Desc_Name , strMake : Asset_Make_Name , strModel : Asset_Model_Name , qtyStockCount : 4 ... ... } Success Response Code : 200 success Resonse example { msg : Asset updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Update Asset"},{"location":"Asset/index.html#get-single-asset-by-id","text":"Get a single Asset by id if current asset was registered on it. URL : /api/assets/:assetid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the asset. Success Response: Code : 200 success Resonse example { msg : Asset found! , data : { _id : 5f6896897b9884253cf6bdb6 , strName : strName , strDescription : strDescription , strMake : strMake , strModel : strModel , qtyMinStockCount : 23, strCity : strCity , strShippingTerms : strShippingTerms , strAddress : strAddress , strNotes : , strProvince : , intCountryID : 45, strInventoryCode : , qtyStockCount : 11, intSiteID : 329, strRow : , strMASourceProduct : , strAisle : , strBinNumber : , intCategoryID : 32, strPostalCode : , strSerialNumber : , strCode : , dblLatitude : 0.114573, dblLongitude : 4.2587, strUnspcCode : , dblLastPrice : 4.5, bolIsBillToFacility : false, intAssetLocationID : 886, bolIsOnline : false, bolIsShippingOrReceivingFacility : false, strQuotingTerms : , intAssetParentID : null, intAccountID : null, intChargeDepartmentID : null, intSuperCategorySysCode : null, strBarcode : , __v : 0 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If asset does not exist on server. Code : 404 Not Found Content example { msg : Asset not found , data :null }","title":"Get Single Asset By Id"},{"location":"Asset/index.html#delete-asset","text":"Delete the Asset by Id URL : /api/assets/:assetid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the asset. Success Response Code : 200 success Resonse example { msg : Asset deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete  Asset"},{"location":"AssetBusiness/index.html","text":"Create AssetBusiness An AssetBusiness represents the relationship between a particular Business within your CMMS and the associated Assets with this Business. It contains information about the Business Role Type, such as Customer/Client, Manufacturer, Owner, Service Provider, or Supplier Create an AssetBusiness if AssetBusiness does not already exist. URL : /api/assetbusiness Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intBusinessID Integer An integer that uniquely identifies the Business (used in conjunction with AssetID). intBusinessRoleTypeID Integer An integer that uniquely identifies the Business Role Type (used in conjunction with BusinessRoleType). intAssetID Integer An integer that uniquely identifies the Asset that is associated with the Business (used in conjunction with BusinessID). bolSendRFQs Boolean If set to true, indicates that RFQs should be sent when stock is low for for an asset (usually parts/supplies). bolPreferredVendor Boolean If set to true, indicates that the vendor is the Preferred Vendor for the associated asset (usually parts/supplies). qtyEconomicBatchQuantity Integer The minimum quantity when re-ordering an asset (usually parts/supplies). strBusinessAssetNumber String A string that represents an asset's part number from the business (usually parts/supplies). intBusinessGroupID Integer Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 4rt8a89c24753232419483c } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Create failed } Read Get AssetBusiness list Get the all registered AssetBusiness list by Business Id . URL : /api/assetbusiness/:businessId Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the AssetBussiness. Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { bolPreferredVendor: false bolSendRFQs: false intAssetID: {_id: 137, strName: New Facility # 137 , intCategoryKind: 1, \u2026} intBusinessID: 9 intBusinessRoleTypeID: 5 strBusinessAssetNumber: ss strCategory: xx _id: 5 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update AssetBusiness Update the AssetBusiness by Id URL : /api/assetbusiness/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the assetbusiness. Param Type Description intBusinessID Integer An integer that uniquely identifies the Business (used in conjunction with AssetID). intBusinessRoleTypeID Integer An integer that uniquely identifies the Business Role Type (used in conjunction with BusinessRoleType). intAssetID Integer An integer that uniquely identifies the Asset that is associated with the Business (used in conjunction with BusinessID). bolSendRFQs Boolean If set to true, indicates that RFQs should be sent when stock is low for for an asset (usually parts/supplies). bolPreferredVendor Boolean If set to true, indicates that the vendor is the Preferred Vendor for the associated asset (usually parts/supplies). qtyEconomicBatchQuantity Integer The minimum quantity when re-ordering an asset (usually parts/supplies). strBusinessAssetNumber String A string that represents an asset's part number from the business (usually parts/supplies). intBusinessGroupID Integer Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed } Delete AssetBusiness Delete an AssetBusiness by Id URL : /api/assetbusiness/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the AssetBussiness. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"AssetBusiness"},{"location":"AssetBusiness/index.html#create-assetbusiness","text":"An AssetBusiness represents the relationship between a particular Business within your CMMS and the associated Assets with this Business. It contains information about the Business Role Type, such as Customer/Client, Manufacturer, Owner, Service Provider, or Supplier Create an AssetBusiness if AssetBusiness does not already exist. URL : /api/assetbusiness Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intBusinessID Integer An integer that uniquely identifies the Business (used in conjunction with AssetID). intBusinessRoleTypeID Integer An integer that uniquely identifies the Business Role Type (used in conjunction with BusinessRoleType). intAssetID Integer An integer that uniquely identifies the Asset that is associated with the Business (used in conjunction with BusinessID). bolSendRFQs Boolean If set to true, indicates that RFQs should be sent when stock is low for for an asset (usually parts/supplies). bolPreferredVendor Boolean If set to true, indicates that the vendor is the Preferred Vendor for the associated asset (usually parts/supplies). qtyEconomicBatchQuantity Integer The minimum quantity when re-ordering an asset (usually parts/supplies). strBusinessAssetNumber String A string that represents an asset's part number from the business (usually parts/supplies). intBusinessGroupID Integer Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 4rt8a89c24753232419483c } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Create failed }","title":"Create AssetBusiness"},{"location":"AssetBusiness/index.html#read-get-assetbusiness-list","text":"Get the all registered AssetBusiness list by Business Id . URL : /api/assetbusiness/:businessId Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the AssetBussiness. Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { bolPreferredVendor: false bolSendRFQs: false intAssetID: {_id: 137, strName: New Facility # 137 , intCategoryKind: 1, \u2026} intBusinessID: 9 intBusinessRoleTypeID: 5 strBusinessAssetNumber: ss strCategory: xx _id: 5 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Read Get AssetBusiness list"},{"location":"AssetBusiness/index.html#update-assetbusiness","text":"Update the AssetBusiness by Id URL : /api/assetbusiness/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the assetbusiness. Param Type Description intBusinessID Integer An integer that uniquely identifies the Business (used in conjunction with AssetID). intBusinessRoleTypeID Integer An integer that uniquely identifies the Business Role Type (used in conjunction with BusinessRoleType). intAssetID Integer An integer that uniquely identifies the Asset that is associated with the Business (used in conjunction with BusinessID). bolSendRFQs Boolean If set to true, indicates that RFQs should be sent when stock is low for for an asset (usually parts/supplies). bolPreferredVendor Boolean If set to true, indicates that the vendor is the Preferred Vendor for the associated asset (usually parts/supplies). qtyEconomicBatchQuantity Integer The minimum quantity when re-ordering an asset (usually parts/supplies). strBusinessAssetNumber String A string that represents an asset's part number from the business (usually parts/supplies). intBusinessGroupID Integer Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed }","title":"Update AssetBusiness"},{"location":"AssetBusiness/index.html#delete-assetbusiness","text":"Delete an AssetBusiness by Id URL : /api/assetbusiness/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the AssetBussiness. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete AssetBusiness"},{"location":"AssetCategory/index.html","text":"Create AssetCategory This object is used for representing a category of assets. Main categories are equipment, tools and facilities but more categories can be created under those root categories. Create an AssetCategory if AssetCategory does not already exist. URL : /api/assetcategory Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intParentID Integer The ID of the parent category this category is directly attached to. strName String A display name for the category. intSysCode Integer System codes are used to define root categories with a significant meaning for the CMMS. There should be only one category with each system code for a given tenant. Possible values are : 0 for Assets, 1 for Locations And Facilities, 2 for Equipment, 3 for Tools, 4 for Parts And Supplies, 5 for Inventory Storage, 6 for Buildings, 7 for Plants, 10 for Regions and 11 for Rotating Spares. bolOverrideRules Boolean If set to true, indicates that the associated asset category overrides the rules set. bolOverrideRules Boolean If set to true, indicates that the associated asset category overrides the rules set. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 4rt8a89c24753232419483c } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strName is required } { msg : Create failed } Get all AssetCategory list Get the all registered AssetCategory list. URL : /api/assetcategory Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 5f6a6f90d9741d152c754178 , intParentID : 11, strName : String , intSysCode : 3, bolOverrideRules :true __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Get Single AssetCategory By Id Get a single AssetCategory by id if current AssetCategory was registered on it. URL : /api/assetcategory/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the assetcategory. Success Response Code : 200 success Resonse example { msg : Found! , data : { _id : 5f6896897b9884253cf6bdb6 , intParentID : Integer , strName : String , intSysCode :3, bolOverrideRules :true } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If AssetCategory does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null } Update AssetCategory Update the AssetCategory by Id URL : /api/assetcategory/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the AssetCategory. Param Type Description intParentID Integer The ID of the parent category this category is directly attached to. strName String A display name for the category. intSysCode Integer System codes are used to define root categories with a significant meaning for the CMMS. There should be only one category with each system code for a given tenant. Possible values are : 0 for Assets, 1 for Locations And Facilities, 2 for Equipment, 3 for Tools, 4 for Parts And Supplies, 5 for Inventory Storage, 6 for Buildings, 7 for Plants, 10 for Regions and 11 for Rotating Spares. bolOverrideRules Boolean If set to true, indicates that the associated asset category overrides the rules set. bolOverrideRules Boolean If set to true, indicates that the associated asset category overrides the rules set. Success Response Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed } Delete AssetCategory Delete a AssetCategory by Id URL : /api/assetcategory/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the assetcategory. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"AssetCategory"},{"location":"AssetCategory/index.html#create-assetcategory","text":"This object is used for representing a category of assets. Main categories are equipment, tools and facilities but more categories can be created under those root categories. Create an AssetCategory if AssetCategory does not already exist. URL : /api/assetcategory Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intParentID Integer The ID of the parent category this category is directly attached to. strName String A display name for the category. intSysCode Integer System codes are used to define root categories with a significant meaning for the CMMS. There should be only one category with each system code for a given tenant. Possible values are : 0 for Assets, 1 for Locations And Facilities, 2 for Equipment, 3 for Tools, 4 for Parts And Supplies, 5 for Inventory Storage, 6 for Buildings, 7 for Plants, 10 for Regions and 11 for Rotating Spares. bolOverrideRules Boolean If set to true, indicates that the associated asset category overrides the rules set. bolOverrideRules Boolean If set to true, indicates that the associated asset category overrides the rules set. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 4rt8a89c24753232419483c } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strName is required } { msg : Create failed }","title":"Create AssetCategory"},{"location":"AssetCategory/index.html#get-all-assetcategory-list","text":"Get the all registered AssetCategory list. URL : /api/assetcategory Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 5f6a6f90d9741d152c754178 , intParentID : 11, strName : String , intSysCode : 3, bolOverrideRules :true __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all AssetCategory list"},{"location":"AssetCategory/index.html#get-single-assetcategory-by-id","text":"Get a single AssetCategory by id if current AssetCategory was registered on it. URL : /api/assetcategory/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the assetcategory. Success Response Code : 200 success Resonse example { msg : Found! , data : { _id : 5f6896897b9884253cf6bdb6 , intParentID : Integer , strName : String , intSysCode :3, bolOverrideRules :true } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If AssetCategory does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null }","title":"Get Single AssetCategory By Id"},{"location":"AssetCategory/index.html#update-assetcategory","text":"Update the AssetCategory by Id URL : /api/assetcategory/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the AssetCategory. Param Type Description intParentID Integer The ID of the parent category this category is directly attached to. strName String A display name for the category. intSysCode Integer System codes are used to define root categories with a significant meaning for the CMMS. There should be only one category with each system code for a given tenant. Possible values are : 0 for Assets, 1 for Locations And Facilities, 2 for Equipment, 3 for Tools, 4 for Parts And Supplies, 5 for Inventory Storage, 6 for Buildings, 7 for Plants, 10 for Regions and 11 for Rotating Spares. bolOverrideRules Boolean If set to true, indicates that the associated asset category overrides the rules set. bolOverrideRules Boolean If set to true, indicates that the associated asset category overrides the rules set. Success Response Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed }","title":"Update AssetCategory"},{"location":"AssetCategory/index.html#delete-assetcategory","text":"Delete a AssetCategory by Id URL : /api/assetcategory/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the assetcategory. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete AssetCategory"},{"location":"AssetEvent/index.html","text":"Create AssetEvent This object represents an event that has occurred on an asset. The type of events that can occur are stored in the AssetEventType object and are defined by each tenant. Create an AssetEvent if AssetEvent does not already exist. URL : /api/assetevent Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Required Type Description dtmDateSubmitted Yes timestamp The date and time when the event was submitted (UNIX epoch milliseconds). intAssetEventTypeID Yes Integer An integer that represents the id of an AssetEventType. intAssetID Yes Integer An integer that represents the id of an Asset. intSubmittedByUserID Integer An integer that represents the id of a User who submitted the event. intWorkOrderID Integer An integer that represents the id of a WorkOrder, if this event originated from a Work Order. This can be null. strAdditionalDescription String A string that represents description of the event. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : dtmDateSubmitted is required } { msg : Create failed } Get all AssetEvent list Get the all registered AssetEvent list by AssetId. URL : /api/assetevent/:assetId Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the asset. Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 5 , dtmDateSubmitted : 2020-10-30T20:26:49.518+00:00, intAssetEventTypeID : 4, intAssetID : 3, intSubmittedByUserID :5, intWorkOrderID :6, strAdditionalDescription : String __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update AssetEvent Update the AssetEvent by Id URL : /api/assetevent/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the AssetEvent. Param Required Type Description dtmDateSubmitted Yes timestamp The date and time when the event was submitted (UNIX epoch milliseconds). intAssetEventTypeID Yes Integer An integer that represents the id of an AssetEventType. intAssetID Yes Integer An integer that represents the id of an Asset. intSubmittedByUserID Integer An integer that represents the id of a User who submitted the event. intWorkOrderID Integer An integer that represents the id of a WorkOrder, if this event originated from a Work Order. This can be null. strAdditionalDescription String A string that represents description of the event. Success Response Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed } Delete AssetEvent Delete a AssetEvent by Id URL : /api/assetevent/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the assetevent. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"AssetEvent"},{"location":"AssetEvent/index.html#create-assetevent","text":"This object represents an event that has occurred on an asset. The type of events that can occur are stored in the AssetEventType object and are defined by each tenant. Create an AssetEvent if AssetEvent does not already exist. URL : /api/assetevent Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Required Type Description dtmDateSubmitted Yes timestamp The date and time when the event was submitted (UNIX epoch milliseconds). intAssetEventTypeID Yes Integer An integer that represents the id of an AssetEventType. intAssetID Yes Integer An integer that represents the id of an Asset. intSubmittedByUserID Integer An integer that represents the id of a User who submitted the event. intWorkOrderID Integer An integer that represents the id of a WorkOrder, if this event originated from a Work Order. This can be null. strAdditionalDescription String A string that represents description of the event. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : dtmDateSubmitted is required } { msg : Create failed }","title":"Create AssetEvent"},{"location":"AssetEvent/index.html#get-all-assetevent-list","text":"Get the all registered AssetEvent list by AssetId. URL : /api/assetevent/:assetId Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the asset. Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 5 , dtmDateSubmitted : 2020-10-30T20:26:49.518+00:00, intAssetEventTypeID : 4, intAssetID : 3, intSubmittedByUserID :5, intWorkOrderID :6, strAdditionalDescription : String __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all AssetEvent list"},{"location":"AssetEvent/index.html#update-assetevent","text":"Update the AssetEvent by Id URL : /api/assetevent/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the AssetEvent. Param Required Type Description dtmDateSubmitted Yes timestamp The date and time when the event was submitted (UNIX epoch milliseconds). intAssetEventTypeID Yes Integer An integer that represents the id of an AssetEventType. intAssetID Yes Integer An integer that represents the id of an Asset. intSubmittedByUserID Integer An integer that represents the id of a User who submitted the event. intWorkOrderID Integer An integer that represents the id of a WorkOrder, if this event originated from a Work Order. This can be null. strAdditionalDescription String A string that represents description of the event. Success Response Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed }","title":"Update AssetEvent"},{"location":"AssetEvent/index.html#delete-assetevent","text":"Delete a AssetEvent by Id URL : /api/assetevent/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the assetevent. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete AssetEvent"},{"location":"AssetEventType/index.html","text":"Create AssetEventType This object is used to represent the different types of events that can occur to an asset. The event types are defined by each tenant. Create an AssetEventType if AssetEventType does not already exist. URL : /api/asseteventtype Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description strEventCode String A string that represents an event code. strEventDescription String A string that represents an event description. strEventName String A string that represents an event name. Success Response Code : 200 success Resonse example { msg : Created successfully! , data : {id: 57 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Create failed } Get all AssetEventType list Get the all registered AssetEventType list. URL : /api/asseteventtype Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example: { msg : Found! , data : [ { id : 47, strEventCode : AssetEventType_Code_Name , strEventDescription : AssetEventType_Desc_Name __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Get Single AssetEventType By Id Get a single AssetEventType by id if current AssetEventType was registered on it. URL : /api/asseteventtype/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the AssetEventType. Success Response Code : 200 success Resonse example { msg : Workorder found! , data : { id : 47, strEventCode : AssetEventType_Code_Name , strEventDescription : AssetEventType_Desc_Name } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If AssetEventType does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null } Update AssetEventType Update the AssetEventType by Id URL : /api/asseteventtype/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorder. Param Type Description strEventCode String A string that represents an event code. strEventDescription String A string that represents an event description. strEventName String A string that represents an event name. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed } Delete AssetEventType Delete a AssetEventType by Id URL : /api/asseteventtype/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the AssetEventType. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"AssetEventType"},{"location":"AssetEventType/index.html#create-asseteventtype","text":"This object is used to represent the different types of events that can occur to an asset. The event types are defined by each tenant. Create an AssetEventType if AssetEventType does not already exist. URL : /api/asseteventtype Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description strEventCode String A string that represents an event code. strEventDescription String A string that represents an event description. strEventName String A string that represents an event name. Success Response Code : 200 success Resonse example { msg : Created successfully! , data : {id: 57 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Create failed }","title":"Create AssetEventType"},{"location":"AssetEventType/index.html#get-all-asseteventtype-list","text":"Get the all registered AssetEventType list. URL : /api/asseteventtype Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example: { msg : Found! , data : [ { id : 47, strEventCode : AssetEventType_Code_Name , strEventDescription : AssetEventType_Desc_Name __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all AssetEventType list"},{"location":"AssetEventType/index.html#get-single-asseteventtype-by-id","text":"Get a single AssetEventType by id if current AssetEventType was registered on it. URL : /api/asseteventtype/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the AssetEventType. Success Response Code : 200 success Resonse example { msg : Workorder found! , data : { id : 47, strEventCode : AssetEventType_Code_Name , strEventDescription : AssetEventType_Desc_Name } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If AssetEventType does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null }","title":"Get Single AssetEventType By Id"},{"location":"AssetEventType/index.html#update-asseteventtype","text":"Update the AssetEventType by Id URL : /api/asseteventtype/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorder. Param Type Description strEventCode String A string that represents an event code. strEventDescription String A string that represents an event description. strEventName String A string that represents an event name. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed }","title":"Update AssetEventType"},{"location":"AssetEventType/index.html#delete-asseteventtype","text":"Delete a AssetEventType by Id URL : /api/asseteventtype/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the AssetEventType. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete AssetEventType"},{"location":"Business/index.html","text":"Create Business A Business represents a particular Business within your CMMS. It contains information about the address of the Business, and the Business Classification, such as Agriculture, Aerospace/Airline, Automotive, Biotechnology, Chemical Processing, Computer, Data Centers, Defense, Education, Electronics, Energy and Utilities, Manufacturing, Software, Technology, and Telecommunications. Create an Business if Business does not already exist. URL : /api/business Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description strProvince String A string that identifies the Province of the Business. strPostalCode String A string that identifies the Postal Code of the Business. strTimezone String A string that identifies the Time Zone of the Business. strPrimaryEmail String A string that identifies the Primary Email of the Business. strName String A string that identifies the Name of the Business. strPhone String A string that identifies the Phone Number of the Business. strFax String A string that identifies the Fax Number of the Business. intCountryID Integer An integer that uniquely identifies the Country of the Business (used in conjunction with the Country object). strAddress String A string that identifies the Address of the Business. strPrimaryContact String A string that identifies the Primary Contact of the Business. strNotes String A string that identifies Notes of the Business. strPhone2 String An additional optional phone number of the Business. strCode String The code of the Business. strCity String The city of the Business. strSecondaryEmail String A string that identifies secondary email of the Business. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 6 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Create failed } Get Single Business By Id Get a single Business by id if current Business was registered on it. URL : /api/business/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the business. Success Response: Code : 200 success Resonse example { msg : Found! , data : { _id : 6 , strProvince : String , strPostalCode : String , strTimezone : String , strPrimaryEmail : String , strName : String , strPhone : String , strFax : String , intCountryID : Integer , strAddress : String , strPrimaryContact : String , strNotes : String , strPhone2 : String , strCode : String , strCity : String , strSecondaryEmail : String } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If Business does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null } Update Business Update the Business by Id URL : /api/business/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the Business. Param Type Description strProvince String A string that identifies the Province of the Business. strPostalCode String A string that identifies the Postal Code of the Business. strTimezone String A string that identifies the Time Zone of the Business. strPrimaryEmail String A string that identifies the Primary Email of the Business. strName String A string that identifies the Name of the Business. strPhone String A string that identifies the Phone Number of the Business. strFax String A string that identifies the Fax Number of the Business. intCountryID Integer An integer that uniquely identifies the Country of the Business (used in conjunction with the Country object). strAddress String A string that identifies the Address of the Business. strPrimaryContact String A string that identifies the Primary Contact of the Business. strNotes String A string that identifies Notes of the Business. strPhone2 String An additional optional phone number of the Business. strCode String The code of the Business. strCity String The city of the Business. strSecondaryEmail String A string that identifies secondary email of the Business. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed } Delete Business Delete a Business by Id URL : /api/business/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the business. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Business"},{"location":"Business/index.html#create-business","text":"A Business represents a particular Business within your CMMS. It contains information about the address of the Business, and the Business Classification, such as Agriculture, Aerospace/Airline, Automotive, Biotechnology, Chemical Processing, Computer, Data Centers, Defense, Education, Electronics, Energy and Utilities, Manufacturing, Software, Technology, and Telecommunications. Create an Business if Business does not already exist. URL : /api/business Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description strProvince String A string that identifies the Province of the Business. strPostalCode String A string that identifies the Postal Code of the Business. strTimezone String A string that identifies the Time Zone of the Business. strPrimaryEmail String A string that identifies the Primary Email of the Business. strName String A string that identifies the Name of the Business. strPhone String A string that identifies the Phone Number of the Business. strFax String A string that identifies the Fax Number of the Business. intCountryID Integer An integer that uniquely identifies the Country of the Business (used in conjunction with the Country object). strAddress String A string that identifies the Address of the Business. strPrimaryContact String A string that identifies the Primary Contact of the Business. strNotes String A string that identifies Notes of the Business. strPhone2 String An additional optional phone number of the Business. strCode String The code of the Business. strCity String The city of the Business. strSecondaryEmail String A string that identifies secondary email of the Business. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 6 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Create failed }","title":"Create Business"},{"location":"Business/index.html#get-single-business-by-id","text":"Get a single Business by id if current Business was registered on it. URL : /api/business/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the business. Success Response: Code : 200 success Resonse example { msg : Found! , data : { _id : 6 , strProvince : String , strPostalCode : String , strTimezone : String , strPrimaryEmail : String , strName : String , strPhone : String , strFax : String , intCountryID : Integer , strAddress : String , strPrimaryContact : String , strNotes : String , strPhone2 : String , strCode : String , strCity : String , strSecondaryEmail : String } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If Business does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null }","title":"Get Single Business By Id"},{"location":"Business/index.html#update-business","text":"Update the Business by Id URL : /api/business/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the Business. Param Type Description strProvince String A string that identifies the Province of the Business. strPostalCode String A string that identifies the Postal Code of the Business. strTimezone String A string that identifies the Time Zone of the Business. strPrimaryEmail String A string that identifies the Primary Email of the Business. strName String A string that identifies the Name of the Business. strPhone String A string that identifies the Phone Number of the Business. strFax String A string that identifies the Fax Number of the Business. intCountryID Integer An integer that uniquely identifies the Country of the Business (used in conjunction with the Country object). strAddress String A string that identifies the Address of the Business. strPrimaryContact String A string that identifies the Primary Contact of the Business. strNotes String A string that identifies Notes of the Business. strPhone2 String An additional optional phone number of the Business. strCode String The code of the Business. strCity String The city of the Business. strSecondaryEmail String A string that identifies secondary email of the Business. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed }","title":"Update Business"},{"location":"Business/index.html#delete-business","text":"Delete a Business by Id URL : /api/business/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the business. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete Business"},{"location":"Business/creat_Business_Api.html","text":"Create Business A Business represents a particular Business within your CMMS. It contains information about the address of the Business, and the Business Classification, such as Agriculture, Aerospace/Airline, Automotive, Biotechnology, Chemical Processing, Computer, Data Centers, Defense, Education, Electronics, Energy and Utilities, Manufacturing, Software, Technology, and Telecommunications. Create an AssetCategory if AssetCategory does not already exist. URL : /api/business Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description strProvince String A string that identifies the Province of the Business. strPostalCode String A string that identifies the Postal Code of the Business. strTimezone String A string that identifies the Time Zone of the Business. strPrimaryEmail String A string that identifies the Primary Email of the Business. strName String A string that identifies the Name of the Business. strPhone String A string that identifies the Phone Number of the Business. strFax String A string that identifies the Fax Number of the Business. intCountryID Integer An integer that uniquely identifies the Country of the Business (used in conjunction with the Country object). strAddress String A string that identifies the Address of the Business. strPrimaryContact String A string that identifies the Primary Contact of the Business. strNotes String A string that identifies Notes of the Business. strPhone2 String An additional optional phone number of the Business. strCode String The code of the Business. strCity String The city of the Business. strSecondaryEmail String A string that identifies secondary email of the Business. Success Response Code : 200 success Resonse example { msg : Created successfully! , data : {id: 6 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Create failed }","title":"Create Business"},{"location":"Business/creat_Business_Api.html#create-business","text":"A Business represents a particular Business within your CMMS. It contains information about the address of the Business, and the Business Classification, such as Agriculture, Aerospace/Airline, Automotive, Biotechnology, Chemical Processing, Computer, Data Centers, Defense, Education, Electronics, Energy and Utilities, Manufacturing, Software, Technology, and Telecommunications. Create an AssetCategory if AssetCategory does not already exist. URL : /api/business Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description strProvince String A string that identifies the Province of the Business. strPostalCode String A string that identifies the Postal Code of the Business. strTimezone String A string that identifies the Time Zone of the Business. strPrimaryEmail String A string that identifies the Primary Email of the Business. strName String A string that identifies the Name of the Business. strPhone String A string that identifies the Phone Number of the Business. strFax String A string that identifies the Fax Number of the Business. intCountryID Integer An integer that uniquely identifies the Country of the Business (used in conjunction with the Country object). strAddress String A string that identifies the Address of the Business. strPrimaryContact String A string that identifies the Primary Contact of the Business. strNotes String A string that identifies Notes of the Business. strPhone2 String An additional optional phone number of the Business. strCode String The code of the Business. strCity String The city of the Business. strSecondaryEmail String A string that identifies secondary email of the Business.","title":"Create Business"},{"location":"Business/creat_Business_Api.html#success-response","text":"Code : 200 success Resonse example { msg : Created successfully! , data : {id: 6 } }","title":"Success Response"},{"location":"Business/creat_Business_Api.html#error-responses","text":"Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Create failed }","title":"Error Responses"},{"location":"Business/delete_Business_Api.html","text":"Delete Business Api Delete a Business by Id URL : /api/business/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the business. Success Response Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete Business Api"},{"location":"Business/delete_Business_Api.html#delete-business-api","text":"Delete a Business by Id URL : /api/business/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the business.","title":"Delete Business Api"},{"location":"Business/delete_Business_Api.html#success-response","text":"Code : 200 success Resonse example { msg : Deleted successfully! , data: null }","title":"Success Response"},{"location":"Business/delete_Business_Api.html#error-responses","text":"Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Error Responses"},{"location":"Business/get_Business_byId_Api.html","text":"Get Single Business By Id Api Get a single Business by id if current Business was registered on it. URL : /api/business/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the business. Success Response Code : 200 success Resonse example { msg : Found! , data : { _id : 6 , strProvince : String , strPostalCode : String , strTimezone : String , strPrimaryEmail : String , strName : String , strPhone : String , strFax : String , intCountryID : Integer , strAddress : String , strPrimaryContact : String , strNotes : String , strPhone2 : String , strCode : String , strCity : String , strSecondaryEmail : String } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If Business does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null }","title":"Get Single Business By Id Api"},{"location":"Business/get_Business_byId_Api.html#get-single-business-by-id-api","text":"Get a single Business by id if current Business was registered on it. URL : /api/business/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the business.","title":"Get Single Business By Id Api"},{"location":"Business/get_Business_byId_Api.html#success-response","text":"Code : 200 success Resonse example { msg : Found! , data : { _id : 6 , strProvince : String , strPostalCode : String , strTimezone : String , strPrimaryEmail : String , strName : String , strPhone : String , strFax : String , intCountryID : Integer , strAddress : String , strPrimaryContact : String , strNotes : String , strPhone2 : String , strCode : String , strCity : String , strSecondaryEmail : String } }","title":"Success Response"},{"location":"Business/get_Business_byId_Api.html#error-responses","text":"Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null }","title":"Error Responses"},{"location":"Business/get_Business_byId_Api.html#or","text":"Condition : If Business does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null }","title":"Or"},{"location":"Business/update_Business_Api.html","text":"Update Business Api Update the Business by Id URL : /api/business/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the Business. Param Type Description strProvince String A string that identifies the Province of the Business. strPostalCode String A string that identifies the Postal Code of the Business. strTimezone String A string that identifies the Time Zone of the Business. strPrimaryEmail String A string that identifies the Primary Email of the Business. strName String A string that identifies the Name of the Business. strPhone String A string that identifies the Phone Number of the Business. strFax String A string that identifies the Fax Number of the Business. intCountryID Integer An integer that uniquely identifies the Country of the Business (used in conjunction with the Country object). strAddress String A string that identifies the Address of the Business. strPrimaryContact String A string that identifies the Primary Contact of the Business. strNotes String A string that identifies Notes of the Business. strPhone2 String An additional optional phone number of the Business. strCode String The code of the Business. strCity String The city of the Business. strSecondaryEmail String A string that identifies secondary email of the Business. Success Response Code : 200 success Resonse example { msg : Updated successfully! } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed }","title":"Update Business Api"},{"location":"Business/update_Business_Api.html#update-business-api","text":"Update the Business by Id URL : /api/business/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the Business. Param Type Description strProvince String A string that identifies the Province of the Business. strPostalCode String A string that identifies the Postal Code of the Business. strTimezone String A string that identifies the Time Zone of the Business. strPrimaryEmail String A string that identifies the Primary Email of the Business. strName String A string that identifies the Name of the Business. strPhone String A string that identifies the Phone Number of the Business. strFax String A string that identifies the Fax Number of the Business. intCountryID Integer An integer that uniquely identifies the Country of the Business (used in conjunction with the Country object). strAddress String A string that identifies the Address of the Business. strPrimaryContact String A string that identifies the Primary Contact of the Business. strNotes String A string that identifies Notes of the Business. strPhone2 String An additional optional phone number of the Business. strCode String The code of the Business. strCity String The city of the Business. strSecondaryEmail String A string that identifies secondary email of the Business.","title":"Update Business Api"},{"location":"Business/update_Business_Api.html#success-response","text":"Code : 200 success Resonse example { msg : Updated successfully! }","title":"Success Response"},{"location":"Business/update_Business_Api.html#error-responses","text":"Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed }","title":"Error Responses"},{"location":"ChargeDepartment/index.html","text":"Create ChargeDepartment This object is used to access the Charge Department lookup table. Create an ChargeDepartment if ChargeDepartment does not already exist. URL : /api/chargedepartment Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Required Type Description strCode Yes String A unique code for referencing the charge department. strDescription Yes String A short text describing the charge department. intFacilityID Integer An integer that can be used to linked the charge department with the facility it is located at. intFacilityID Integer An integer that can be used to linked the charge department with the facility it is located at. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 4 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strCode is required } { msg : Create failed } Get all ChargeDepartment list Get the all registered ChargeDepartment list. URL : /api/chargedepartment Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 6 , strCode : String , strDescription : String , intFacilityID : Object, intUpdated :2020-10-16T18:12:30.433+00:00 __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Get Single ChargeDepartment By Id Get a single ChargeDepartment by id if current ChargeDepartment was registered on it. URL : /api/chargedepartment/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the chargedepartment. Success Response: Code : 200 success Resonse example { msg : Found! , data : { _id : 7 , strCode : String , strDescription : String , intFacilityID : Integer , intUpdated :2020-10-16T18:12:30.433+00:00 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If chargedepartment does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null } Update ChargeDepartment Update the ChargeDepartment by Id URL : /api/chargedepartment/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the ChargeDepartment. Param Required Type Description strCode Yes String A unique code for referencing the charge department. strDescription Yes String A short text describing the charge department. intFacilityID Integer An integer that can be used to linked the charge department with the facility it is located at. intFacilityID Integer An integer that can be used to linked the charge department with the facility it is located at. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed } Delete ChargeDepartment Delete a ChargeDepartment by Id URL : /api/chargedepartment/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the chargedepartment. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"ChargeDepartment"},{"location":"ChargeDepartment/index.html#create-chargedepartment","text":"This object is used to access the Charge Department lookup table. Create an ChargeDepartment if ChargeDepartment does not already exist. URL : /api/chargedepartment Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Required Type Description strCode Yes String A unique code for referencing the charge department. strDescription Yes String A short text describing the charge department. intFacilityID Integer An integer that can be used to linked the charge department with the facility it is located at. intFacilityID Integer An integer that can be used to linked the charge department with the facility it is located at. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 4 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strCode is required } { msg : Create failed }","title":"Create ChargeDepartment"},{"location":"ChargeDepartment/index.html#get-all-chargedepartment-list","text":"Get the all registered ChargeDepartment list. URL : /api/chargedepartment Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 6 , strCode : String , strDescription : String , intFacilityID : Object, intUpdated :2020-10-16T18:12:30.433+00:00 __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all ChargeDepartment list"},{"location":"ChargeDepartment/index.html#get-single-chargedepartment-by-id","text":"Get a single ChargeDepartment by id if current ChargeDepartment was registered on it. URL : /api/chargedepartment/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the chargedepartment. Success Response: Code : 200 success Resonse example { msg : Found! , data : { _id : 7 , strCode : String , strDescription : String , intFacilityID : Integer , intUpdated :2020-10-16T18:12:30.433+00:00 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If chargedepartment does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null }","title":"Get Single ChargeDepartment By Id"},{"location":"ChargeDepartment/index.html#update-chargedepartment","text":"Update the ChargeDepartment by Id URL : /api/chargedepartment/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the ChargeDepartment. Param Required Type Description strCode Yes String A unique code for referencing the charge department. strDescription Yes String A short text describing the charge department. intFacilityID Integer An integer that can be used to linked the charge department with the facility it is located at. intFacilityID Integer An integer that can be used to linked the charge department with the facility it is located at. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed }","title":"Update ChargeDepartment"},{"location":"ChargeDepartment/index.html#delete-chargedepartment","text":"Delete a ChargeDepartment by Id URL : /api/chargedepartment/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the chargedepartment. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete ChargeDepartment"},{"location":"MeterReading/index.html","text":"Create MeterReading This object is used to store meter readings for some of the managed assets. Create a MeterReading if MeterReading does not already exist. URL : /api/meterreading Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Required Type Description intWorkOrderID Integer The ID of the work order, in case the meter reading was submitted during the completion of a work order. Please refer to the WorkOrder section. intSubmittedByUserID Integer The ID of the user who submitted the meter reading. For getting all possible values, please refer to the User section. intMeterReadingUnitsID Yes Integer The ID of the unit used for the meter reading. For getting all possible values, please refer to the MeterReadingUnit section. dblMeterReading Yes Double The actual value of the meter reading. intAssetID Yes Integer The ID of the asset the meter reading was performed on. For getting all possible values, please refer to the Asset section. dtmDateSubmitted Yes timestamp The date and time of the moment when the meter reading was submitted. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 1 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : intMeterReadingUnitsID is required } { msg : Create failed } Get all MeterReading list Get the all registered MeterReading list by AssetId. URL : /api/meterreading/:assetId Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the Asset. Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 6 , intWorkOrderID : 7 , intSubmittedByUserID : Object, intMeterReadingUnitsID : Object, dblMeterReading : 0.2, intAssetID : 4, dtmDateSubmitted :2020-10-16T18:12:30.433+00:00, __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update MeterReading Update the MeterReading by Id URL : /api/meterreading/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the MeterReading. Param Required Type Description intWorkOrderID Integer The ID of the work order, in case the meter reading was submitted during the completion of a work order. Please refer to the WorkOrder section. intSubmittedByUserID Integer The ID of the user who submitted the meter reading. For getting all possible values, please refer to the User section. intMeterReadingUnitsID Yes Integer The ID of the unit used for the meter reading. For getting all possible values, please refer to the MeterReadingUnit section. dblMeterReading Yes Double The actual value of the meter reading. intAssetID Yes Integer The ID of the asset the meter reading was performed on. For getting all possible values, please refer to the Asset section. dtmDateSubmitted Yes timestamp The date and time of the moment when the meter reading was submitted. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed } Delete MeterReading Delete a MeterReading by Id URL : /api/meterreading/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the MeterReading. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"MeterReading"},{"location":"MeterReading/index.html#create-meterreading","text":"This object is used to store meter readings for some of the managed assets. Create a MeterReading if MeterReading does not already exist. URL : /api/meterreading Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Required Type Description intWorkOrderID Integer The ID of the work order, in case the meter reading was submitted during the completion of a work order. Please refer to the WorkOrder section. intSubmittedByUserID Integer The ID of the user who submitted the meter reading. For getting all possible values, please refer to the User section. intMeterReadingUnitsID Yes Integer The ID of the unit used for the meter reading. For getting all possible values, please refer to the MeterReadingUnit section. dblMeterReading Yes Double The actual value of the meter reading. intAssetID Yes Integer The ID of the asset the meter reading was performed on. For getting all possible values, please refer to the Asset section. dtmDateSubmitted Yes timestamp The date and time of the moment when the meter reading was submitted. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 1 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : intMeterReadingUnitsID is required } { msg : Create failed }","title":"Create MeterReading"},{"location":"MeterReading/index.html#get-all-meterreading-list","text":"Get the all registered MeterReading list by AssetId. URL : /api/meterreading/:assetId Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the Asset. Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 6 , intWorkOrderID : 7 , intSubmittedByUserID : Object, intMeterReadingUnitsID : Object, dblMeterReading : 0.2, intAssetID : 4, dtmDateSubmitted :2020-10-16T18:12:30.433+00:00, __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all MeterReading list"},{"location":"MeterReading/index.html#update-meterreading","text":"Update the MeterReading by Id URL : /api/meterreading/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the MeterReading. Param Required Type Description intWorkOrderID Integer The ID of the work order, in case the meter reading was submitted during the completion of a work order. Please refer to the WorkOrder section. intSubmittedByUserID Integer The ID of the user who submitted the meter reading. For getting all possible values, please refer to the User section. intMeterReadingUnitsID Yes Integer The ID of the unit used for the meter reading. For getting all possible values, please refer to the MeterReadingUnit section. dblMeterReading Yes Double The actual value of the meter reading. intAssetID Yes Integer The ID of the asset the meter reading was performed on. For getting all possible values, please refer to the Asset section. dtmDateSubmitted Yes timestamp The date and time of the moment when the meter reading was submitted. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed }","title":"Update MeterReading"},{"location":"MeterReading/index.html#delete-meterreading","text":"Delete a MeterReading by Id URL : /api/meterreading/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the MeterReading. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete MeterReading"},{"location":"MeterReadingUnit/index.html","text":"Create MeterReadingUnit This object is used to represent units for the meter readings. Meter reading units can be added and deleted but a unit cannot be deleted if it is already referred somewhere in the CMMS. Create a MeterReadingUnit if MeterReadingUnit does not already exist. URL : /api/meterreadingunit Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Required Type Description strName Yes String The display name of the meter reading unit. For example : \"Kilowatts\",\"Cycles\" or \"Gallons\" strSymbol Yes String The symbol of the meter reading unit. For example \"kw\", \"kPa\" or \"g\" intPrecision Integer The number of digits to be displayed after the point when rendering the value of a meter reading with this unit. With a precision of 3, example values will be \"13.654\",\"9.111\" Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 1 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strName is required } { msg : Create failed } Get all MeterReadingUnit list Get the all registered MeterReadingUnit list. URL : /api/meterreadingunit/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the MeterReadingUnit. Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 6 , strName : Kilowatts , strSymbol : Kw , intPrecision : 13.654, intUpdated :2020-10-16T18:12:30.433+00:00, __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update MeterReadingUnit Update the MeterReadingUnit by Id URL : /api/meterreadingunit/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the MeterReadingUnit. Param Required Type Description strName Yes String The display name of the meter reading unit. For example : \"Kilowatts\",\"Cycles\" or \"Gallons\" strSymbol Yes String The symbol of the meter reading unit. For example \"kw\", \"kPa\" or \"g\" intPrecision Integer The number of digits to be displayed after the point when rendering the value of a meter reading with this unit. With a precision of 3, example values will be \"13.654\",\"9.111\" Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed } Delete MeterReadingUnit Delete a MeterReadingUnit by Id URL : /api/meterreadingunit/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the MeterReadingUnit. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"MeterReadingUnit"},{"location":"MeterReadingUnit/index.html#create-meterreadingunit","text":"This object is used to represent units for the meter readings. Meter reading units can be added and deleted but a unit cannot be deleted if it is already referred somewhere in the CMMS. Create a MeterReadingUnit if MeterReadingUnit does not already exist. URL : /api/meterreadingunit Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Required Type Description strName Yes String The display name of the meter reading unit. For example : \"Kilowatts\",\"Cycles\" or \"Gallons\" strSymbol Yes String The symbol of the meter reading unit. For example \"kw\", \"kPa\" or \"g\" intPrecision Integer The number of digits to be displayed after the point when rendering the value of a meter reading with this unit. With a precision of 3, example values will be \"13.654\",\"9.111\" Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 1 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : strName is required } { msg : Create failed }","title":"Create MeterReadingUnit"},{"location":"MeterReadingUnit/index.html#get-all-meterreadingunit-list","text":"Get the all registered MeterReadingUnit list. URL : /api/meterreadingunit/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the MeterReadingUnit. Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 6 , strName : Kilowatts , strSymbol : Kw , intPrecision : 13.654, intUpdated :2020-10-16T18:12:30.433+00:00, __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all MeterReadingUnit list"},{"location":"MeterReadingUnit/index.html#update-meterreadingunit","text":"Update the MeterReadingUnit by Id URL : /api/meterreadingunit/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the MeterReadingUnit. Param Required Type Description strName Yes String The display name of the meter reading unit. For example : \"Kilowatts\",\"Cycles\" or \"Gallons\" strSymbol Yes String The symbol of the meter reading unit. For example \"kw\", \"kPa\" or \"g\" intPrecision Integer The number of digits to be displayed after the point when rendering the value of a meter reading with this unit. With a precision of 3, example values will be \"13.654\",\"9.111\" Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed }","title":"Update MeterReadingUnit"},{"location":"MeterReadingUnit/index.html#delete-meterreadingunit","text":"Delete a MeterReadingUnit by Id URL : /api/meterreadingunit/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the MeterReadingUnit. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete MeterReadingUnit"},{"location":"Project/index.html","text":"Create Project This object is used to represent a project. A project is used to group scheduled maintenances and work orders together. Create a Project if Project does not already exist. URL : /api/project Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Required Type Description intSiteID Yes Integer For multi-sites tenants, the ID of the site the project was created for. A site is an asset itself, so for possible values, please refer to the Asset section. strName Integer Display name of the project. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 1 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : intSiteID is required } { msg : Create failed } Read all Project list Get the all registered Project list. URL : /api/project Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 1 , intSiteID : 2, strName : String __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Get Single Project By Id Get a single Project by id if current Project was registered on it. URL : /api/project/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the project. Success Response: Code : 200 success Resonse example { msg : Found! , data : { _id : 3 , intSiteID : Integer , strName : String } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If AssetCategory does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null } Update Project Update the Project by Id URL : /api/project/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the Project. Param Required Type Description intSiteID Yes Integer For multi-sites tenants, the ID of the site the project was created for. A site is an asset itself, so for possible values, please refer to the Asset section. strName Integer Display name of the project. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed } Delete Project Delete a Project by Id URL : /api/project/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the Project. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Project"},{"location":"Project/index.html#create-project","text":"This object is used to represent a project. A project is used to group scheduled maintenances and work orders together. Create a Project if Project does not already exist. URL : /api/project Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Required Type Description intSiteID Yes Integer For multi-sites tenants, the ID of the site the project was created for. A site is an asset itself, so for possible values, please refer to the Asset section. strName Integer Display name of the project. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 1 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : intSiteID is required } { msg : Create failed }","title":"Create Project"},{"location":"Project/index.html#read-all-project-list","text":"Get the all registered Project list. URL : /api/project Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 1 , intSiteID : 2, strName : String __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Read all Project list"},{"location":"Project/index.html#get-single-project-by-id","text":"Get a single Project by id if current Project was registered on it. URL : /api/project/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the project. Success Response: Code : 200 success Resonse example { msg : Found! , data : { _id : 3 , intSiteID : Integer , strName : String } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If AssetCategory does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null }","title":"Get Single Project By Id"},{"location":"Project/index.html#update-project","text":"Update the Project by Id URL : /api/project/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the Project. Param Required Type Description intSiteID Yes Integer For multi-sites tenants, the ID of the site the project was created for. A site is an asset itself, so for possible values, please refer to the Asset section. strName Integer Display name of the project. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed }","title":"Update Project"},{"location":"Project/index.html#delete-project","text":"Delete a Project by Id URL : /api/project/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the Project. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete Project"},{"location":"ScheduleTrigger/index.html","text":"Create ScheduleTrigger A ScheduleTrigger represents a trigger that is created on a ScheduledMaintenance for scheduling a WorkOrder. A WorkOrder can be scheduled for a ScheduledMaintenance when any of the ScheduleTriggers fire or when all of the ScheduleTriggers are fired depending on the configuration specified on ScheduledMaintenance. Create an ScheduleTrigger if ScheduleTrigger does not already exist. URL : /api/scheduletrigger Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description bolTSWFriday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Friday. bolTSWMonday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Monday. bolTSWSaturday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Saturday. bolTSWSunday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Sunday. bolTSWThursday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Thursday. bolTSWTuesday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Tuesday. bolTSWWednesday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Wednesday. strDatLogicHourly String For a Time Schedule trigger, this field shows the logic of the hourly setting. It is set to x (fixed) or t (floating). strDatLogicDaily String For a Time Schedule trigger, this field shows the logic of the daily setting. It is set to x (fixed) or t (floating). strDatLogicMonthly String For a Time Schedule trigger, this field shows the logic of the monthly setting. It is set to x (fixed) or t (floating). strDatLogicYearly String For a Time Schedule trigger, this field shows the logic of the yearly setting. It is set to x (fixed) or t (floating). dblLastMeterReading double For a Meter Reading trigger, this field identifies the last meter reading recorded. dblRMeterReading double For a Meter Reading trigger, this field specifies the interval in which it should be triggered (Ex: Every 90 hours). dblROMeterReading double For a Meter Reading trigger, this field specifies the value when it should be triggered (Ex: When Hours (h) Reading is greater than 10). dblRREndBy double For a Meter Reading trigger, this field specifies the End By Reading configured for the trigger. If no End By is configured, it defaults to 0. dblRRStart double For a Meter Reading trigger, this field specifies the Start At Reading configured for the trigger. If no Start At is configured, it defaults to 0. dtmLastTriggered timestamp The date and time which the trigger was triggered last. intAssetEventTypeID Integer For an Event trigger, this field specifies the ID of the AssetEventType associated with the trigger. intRMeterReadingUnitID Integer For a Meter Reading trigger, this field specifies ID of MeterReadingUnit associated with the trigger when the trigger is configured for Every reading of the unit. intROMeterReadingUnitID Integer For a Meter Reading trigger, this field specifies ID of MeterReadingUnit associated with the trigger when the trigger is configured based on a condition. intRREndAfter Integer For Meter Reading trigger, it specifies the reading after which to stop the trigger. intScheduledMaintenanceID Integer The ID of the ScheduledMaintenance associated with the trigger. intTREndAfter Integer This field is used to determine after how many occurrences the trigger should be stopped. intTSDEveryDays Integer For a Time Schedule trigger that is configured to be daily, it denotes the daily rate of repetition associated with the trigger. intTSHEveryHours Integer For a Time Schedule trigger that is configured to be hourly, it denotes the hourly rate of repetition associated with the trigger. intTSMDayOfMonth Integer For a Time Schedule trigger that is configured to be monthly, it denotes the day of the month associated with the trigger. intTSMEveryMonths Integer For Time Schedule trigger that is configured to be monthly, it denotes the monthly rate of repetition associated with the trigger. intTSWEveryWeeks Integer For a Time Schedule trigger that is configured to be weekly, it denotes the weekly rate of repetition associated with the trigger. intTSYDayOfMonth Integer For a Time Schedule trigger that is configured to be yearly, it denotes the day of the month associated with the trigger. intTSYEveryYears Integer For a Time Schedule trigger that is configured to be yearly, it denotes the yearly rate of repetition associated with the trigger. intTSYMonthOfYear Integer For a Time Schedule trigger that is configured to be yearly, it denotes the month of the year associated with the trigger. Do note that the months start at 0. For eg: The year starts at January (0) and ends with December (11). strROType String For a Meter Reading trigger, this field is the Trigger Meter (When) Comparison. It is set to l (less than), g (greater than), or empty if not meter reading based. strRRType String It is the Trigger Schedule No End Date. It is set to empty if not time based, n (no end date), b (has a end date). strRType String For a Meter Reading trigger, this field is the Trigger Meter Type. It is set to e (every), o (other), empty if not meter reading based. strTRType String It is the Trigger Reading End type. It is set to n (no end reading), b (end by reading). strTSType String It is the Trigger Schedule Type. It is set to h (hourly), d (daily), w (weekly), m (monthly), y (yearly). strType String This field denotes the type of the Schedule Trigger. It is set to t for Time Schedule trigger, r for Meter Reading Trigger and e for an Event Trigger. strMrLogic String For a Meter Reading trigger, this field is used to determine the logic of the schedule. It is set x (fixed) or t (floating). bolMrByWOClosed boolean If set to true, the Meter Reading trigger should check the reading when the WO is closed. bolCreateWorkOrderOnStartDate boolean If set to true, it indicates that a WorkOrder be created on the start date when the trigger is scheduled. intAssetID Integer Indicates the ID for an Asset associated with the ScheduledMaintenance that creates the trigger. For a Meter Reading trigger, this field needs to be populated with the Asset id of one of the ScheduledMaintenance Assets. strScheduleDescription String The description for the Schedule Trigger. intTRTriggerTime Integer For all the Time Schedule triggers except an hourly trigger, this field specifies time at which it will be triggered. It can have a value between 0 and 23. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 71 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Create failed } Get all ScheduleTrigger list Get the all registered ScheduleTrigger list. URL : /api/scheduletrigger Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 32 , strAssignedUserIds : 13 8 9 intPriorityID : 4156, intWorkOrderStatusID : 4, strAssets : ASSET ABC (0010), ASSET DEF (0011) intSiteID : 3345, strAssignedUsers : John Doe, Samuel Smith , intRequestedByUserID : 667, strEmailUserGuest: , dtmDateCreated: , strAssetIds: 9 78 675 , dtmDateCompleted: , intCompletedByUserID:555 ... __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Update ScheduleTrigger Update the ScheduleTrigger by Id URL : /api/scheduletrigger/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the ScheduleTrigger. Param Type Description bolTSWFriday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Friday. bolTSWMonday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Monday. bolTSWSaturday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Saturday. bolTSWSunday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Sunday. bolTSWThursday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Thursday. bolTSWTuesday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Tuesday. bolTSWWednesday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Wednesday. strDatLogicHourly String For a Time Schedule trigger, this field shows the logic of the hourly setting. It is set to x (fixed) or t (floating). strDatLogicDaily String For a Time Schedule trigger, this field shows the logic of the daily setting. It is set to x (fixed) or t (floating). strDatLogicMonthly String For a Time Schedule trigger, this field shows the logic of the monthly setting. It is set to x (fixed) or t (floating). strDatLogicYearly String For a Time Schedule trigger, this field shows the logic of the yearly setting. It is set to x (fixed) or t (floating). dblLastMeterReading double For a Meter Reading trigger, this field identifies the last meter reading recorded. dblRMeterReading double For a Meter Reading trigger, this field specifies the interval in which it should be triggered (Ex: Every 90 hours). dblROMeterReading double For a Meter Reading trigger, this field specifies the value when it should be triggered (Ex: When Hours (h) Reading is greater than 10). dblRREndBy double For a Meter Reading trigger, this field specifies the End By Reading configured for the trigger. If no End By is configured, it defaults to 0. dblRRStart double For a Meter Reading trigger, this field specifies the Start At Reading configured for the trigger. If no Start At is configured, it defaults to 0. dtmLastTriggered timestamp The date and time which the trigger was triggered last. intAssetEventTypeID Integer For an Event trigger, this field specifies the ID of the AssetEventType associated with the trigger. intRMeterReadingUnitID Integer For a Meter Reading trigger, this field specifies ID of MeterReadingUnit associated with the trigger when the trigger is configured for Every reading of the unit. intROMeterReadingUnitID Integer For a Meter Reading trigger, this field specifies ID of MeterReadingUnit associated with the trigger when the trigger is configured based on a condition. intRREndAfter Integer For Meter Reading trigger, it specifies the reading after which to stop the trigger. intScheduledMaintenanceID Integer The ID of the ScheduledMaintenance associated with the trigger. intTREndAfter Integer This field is used to determine after how many occurrences the trigger should be stopped. intTSDEveryDays Integer For a Time Schedule trigger that is configured to be daily, it denotes the daily rate of repetition associated with the trigger. intTSHEveryHours Integer For a Time Schedule trigger that is configured to be hourly, it denotes the hourly rate of repetition associated with the trigger. intTSMDayOfMonth Integer For a Time Schedule trigger that is configured to be monthly, it denotes the day of the month associated with the trigger. intTSMEveryMonths Integer For Time Schedule trigger that is configured to be monthly, it denotes the monthly rate of repetition associated with the trigger. intTSWEveryWeeks Integer For a Time Schedule trigger that is configured to be weekly, it denotes the weekly rate of repetition associated with the trigger. intTSYDayOfMonth Integer For a Time Schedule trigger that is configured to be yearly, it denotes the day of the month associated with the trigger. intTSYEveryYears Integer For a Time Schedule trigger that is configured to be yearly, it denotes the yearly rate of repetition associated with the trigger. intTSYMonthOfYear Integer For a Time Schedule trigger that is configured to be yearly, it denotes the month of the year associated with the trigger. Do note that the months start at 0. For eg: The year starts at January (0) and ends with December (11). strROType String For a Meter Reading trigger, this field is the Trigger Meter (When) Comparison. It is set to l (less than), g (greater than), or empty if not meter reading based. strRRType String It is the Trigger Schedule No End Date. It is set to empty if not time based, n (no end date), b (has a end date). strRType String For a Meter Reading trigger, this field is the Trigger Meter Type. It is set to e (every), o (other), empty if not meter reading based. strTRType String It is the Trigger Reading End type. It is set to n (no end reading), b (end by reading). strTSType String It is the Trigger Schedule Type. It is set to h (hourly), d (daily), w (weekly), m (monthly), y (yearly). strType String This field denotes the type of the Schedule Trigger. It is set to t for Time Schedule trigger, r for Meter Reading Trigger and e for an Event Trigger. strMrLogic String For a Meter Reading trigger, this field is used to determine the logic of the schedule. It is set x (fixed) or t (floating). bolMrByWOClosed boolean If set to true, the Meter Reading trigger should check the reading when the WO is closed. bolCreateWorkOrderOnStartDate boolean If set to true, it indicates that a WorkOrder be created on the start date when the trigger is scheduled. intAssetID Integer Indicates the ID for an Asset associated with the ScheduledMaintenance that creates the trigger. For a Meter Reading trigger, this field needs to be populated with the Asset id of one of the ScheduledMaintenance Assets. strScheduleDescription String The description for the Schedule Trigger. intTRTriggerTime Integer For all the Time Schedule triggers except an hourly trigger, this field specifies time at which it will be triggered. It can have a value between 0 and 23. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed } Delete ScheduleTrigger Delete a ScheduleTrigger by Id URL : /api/scheduletrigger/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the ScheduleTrigger. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"ScheduleTrigger"},{"location":"ScheduleTrigger/index.html#create-scheduletrigger","text":"A ScheduleTrigger represents a trigger that is created on a ScheduledMaintenance for scheduling a WorkOrder. A WorkOrder can be scheduled for a ScheduledMaintenance when any of the ScheduleTriggers fire or when all of the ScheduleTriggers are fired depending on the configuration specified on ScheduledMaintenance. Create an ScheduleTrigger if ScheduleTrigger does not already exist. URL : /api/scheduletrigger Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description bolTSWFriday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Friday. bolTSWMonday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Monday. bolTSWSaturday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Saturday. bolTSWSunday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Sunday. bolTSWThursday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Thursday. bolTSWTuesday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Tuesday. bolTSWWednesday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Wednesday. strDatLogicHourly String For a Time Schedule trigger, this field shows the logic of the hourly setting. It is set to x (fixed) or t (floating). strDatLogicDaily String For a Time Schedule trigger, this field shows the logic of the daily setting. It is set to x (fixed) or t (floating). strDatLogicMonthly String For a Time Schedule trigger, this field shows the logic of the monthly setting. It is set to x (fixed) or t (floating). strDatLogicYearly String For a Time Schedule trigger, this field shows the logic of the yearly setting. It is set to x (fixed) or t (floating). dblLastMeterReading double For a Meter Reading trigger, this field identifies the last meter reading recorded. dblRMeterReading double For a Meter Reading trigger, this field specifies the interval in which it should be triggered (Ex: Every 90 hours). dblROMeterReading double For a Meter Reading trigger, this field specifies the value when it should be triggered (Ex: When Hours (h) Reading is greater than 10). dblRREndBy double For a Meter Reading trigger, this field specifies the End By Reading configured for the trigger. If no End By is configured, it defaults to 0. dblRRStart double For a Meter Reading trigger, this field specifies the Start At Reading configured for the trigger. If no Start At is configured, it defaults to 0. dtmLastTriggered timestamp The date and time which the trigger was triggered last. intAssetEventTypeID Integer For an Event trigger, this field specifies the ID of the AssetEventType associated with the trigger. intRMeterReadingUnitID Integer For a Meter Reading trigger, this field specifies ID of MeterReadingUnit associated with the trigger when the trigger is configured for Every reading of the unit. intROMeterReadingUnitID Integer For a Meter Reading trigger, this field specifies ID of MeterReadingUnit associated with the trigger when the trigger is configured based on a condition. intRREndAfter Integer For Meter Reading trigger, it specifies the reading after which to stop the trigger. intScheduledMaintenanceID Integer The ID of the ScheduledMaintenance associated with the trigger. intTREndAfter Integer This field is used to determine after how many occurrences the trigger should be stopped. intTSDEveryDays Integer For a Time Schedule trigger that is configured to be daily, it denotes the daily rate of repetition associated with the trigger. intTSHEveryHours Integer For a Time Schedule trigger that is configured to be hourly, it denotes the hourly rate of repetition associated with the trigger. intTSMDayOfMonth Integer For a Time Schedule trigger that is configured to be monthly, it denotes the day of the month associated with the trigger. intTSMEveryMonths Integer For Time Schedule trigger that is configured to be monthly, it denotes the monthly rate of repetition associated with the trigger. intTSWEveryWeeks Integer For a Time Schedule trigger that is configured to be weekly, it denotes the weekly rate of repetition associated with the trigger. intTSYDayOfMonth Integer For a Time Schedule trigger that is configured to be yearly, it denotes the day of the month associated with the trigger. intTSYEveryYears Integer For a Time Schedule trigger that is configured to be yearly, it denotes the yearly rate of repetition associated with the trigger. intTSYMonthOfYear Integer For a Time Schedule trigger that is configured to be yearly, it denotes the month of the year associated with the trigger. Do note that the months start at 0. For eg: The year starts at January (0) and ends with December (11). strROType String For a Meter Reading trigger, this field is the Trigger Meter (When) Comparison. It is set to l (less than), g (greater than), or empty if not meter reading based. strRRType String It is the Trigger Schedule No End Date. It is set to empty if not time based, n (no end date), b (has a end date). strRType String For a Meter Reading trigger, this field is the Trigger Meter Type. It is set to e (every), o (other), empty if not meter reading based. strTRType String It is the Trigger Reading End type. It is set to n (no end reading), b (end by reading). strTSType String It is the Trigger Schedule Type. It is set to h (hourly), d (daily), w (weekly), m (monthly), y (yearly). strType String This field denotes the type of the Schedule Trigger. It is set to t for Time Schedule trigger, r for Meter Reading Trigger and e for an Event Trigger. strMrLogic String For a Meter Reading trigger, this field is used to determine the logic of the schedule. It is set x (fixed) or t (floating). bolMrByWOClosed boolean If set to true, the Meter Reading trigger should check the reading when the WO is closed. bolCreateWorkOrderOnStartDate boolean If set to true, it indicates that a WorkOrder be created on the start date when the trigger is scheduled. intAssetID Integer Indicates the ID for an Asset associated with the ScheduledMaintenance that creates the trigger. For a Meter Reading trigger, this field needs to be populated with the Asset id of one of the ScheduledMaintenance Assets. strScheduleDescription String The description for the Schedule Trigger. intTRTriggerTime Integer For all the Time Schedule triggers except an hourly trigger, this field specifies time at which it will be triggered. It can have a value between 0 and 23. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 71 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Create failed }","title":"Create ScheduleTrigger"},{"location":"ScheduleTrigger/index.html#get-all-scheduletrigger-list","text":"Get the all registered ScheduleTrigger list. URL : /api/scheduletrigger Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 32 , strAssignedUserIds : 13 8 9 intPriorityID : 4156, intWorkOrderStatusID : 4, strAssets : ASSET ABC (0010), ASSET DEF (0011) intSiteID : 3345, strAssignedUsers : John Doe, Samuel Smith , intRequestedByUserID : 667, strEmailUserGuest: , dtmDateCreated: , strAssetIds: 9 78 675 , dtmDateCompleted: , intCompletedByUserID:555 ... __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all ScheduleTrigger list"},{"location":"ScheduleTrigger/index.html#update-scheduletrigger","text":"Update the ScheduleTrigger by Id URL : /api/scheduletrigger/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the ScheduleTrigger. Param Type Description bolTSWFriday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Friday. bolTSWMonday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Monday. bolTSWSaturday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Saturday. bolTSWSunday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Sunday. bolTSWThursday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Thursday. bolTSWTuesday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Tuesday. bolTSWWednesday boolean If set to true, this field indicates that the Time Schedule trigger is configured to run weekly on every Wednesday. strDatLogicHourly String For a Time Schedule trigger, this field shows the logic of the hourly setting. It is set to x (fixed) or t (floating). strDatLogicDaily String For a Time Schedule trigger, this field shows the logic of the daily setting. It is set to x (fixed) or t (floating). strDatLogicMonthly String For a Time Schedule trigger, this field shows the logic of the monthly setting. It is set to x (fixed) or t (floating). strDatLogicYearly String For a Time Schedule trigger, this field shows the logic of the yearly setting. It is set to x (fixed) or t (floating). dblLastMeterReading double For a Meter Reading trigger, this field identifies the last meter reading recorded. dblRMeterReading double For a Meter Reading trigger, this field specifies the interval in which it should be triggered (Ex: Every 90 hours). dblROMeterReading double For a Meter Reading trigger, this field specifies the value when it should be triggered (Ex: When Hours (h) Reading is greater than 10). dblRREndBy double For a Meter Reading trigger, this field specifies the End By Reading configured for the trigger. If no End By is configured, it defaults to 0. dblRRStart double For a Meter Reading trigger, this field specifies the Start At Reading configured for the trigger. If no Start At is configured, it defaults to 0. dtmLastTriggered timestamp The date and time which the trigger was triggered last. intAssetEventTypeID Integer For an Event trigger, this field specifies the ID of the AssetEventType associated with the trigger. intRMeterReadingUnitID Integer For a Meter Reading trigger, this field specifies ID of MeterReadingUnit associated with the trigger when the trigger is configured for Every reading of the unit. intROMeterReadingUnitID Integer For a Meter Reading trigger, this field specifies ID of MeterReadingUnit associated with the trigger when the trigger is configured based on a condition. intRREndAfter Integer For Meter Reading trigger, it specifies the reading after which to stop the trigger. intScheduledMaintenanceID Integer The ID of the ScheduledMaintenance associated with the trigger. intTREndAfter Integer This field is used to determine after how many occurrences the trigger should be stopped. intTSDEveryDays Integer For a Time Schedule trigger that is configured to be daily, it denotes the daily rate of repetition associated with the trigger. intTSHEveryHours Integer For a Time Schedule trigger that is configured to be hourly, it denotes the hourly rate of repetition associated with the trigger. intTSMDayOfMonth Integer For a Time Schedule trigger that is configured to be monthly, it denotes the day of the month associated with the trigger. intTSMEveryMonths Integer For Time Schedule trigger that is configured to be monthly, it denotes the monthly rate of repetition associated with the trigger. intTSWEveryWeeks Integer For a Time Schedule trigger that is configured to be weekly, it denotes the weekly rate of repetition associated with the trigger. intTSYDayOfMonth Integer For a Time Schedule trigger that is configured to be yearly, it denotes the day of the month associated with the trigger. intTSYEveryYears Integer For a Time Schedule trigger that is configured to be yearly, it denotes the yearly rate of repetition associated with the trigger. intTSYMonthOfYear Integer For a Time Schedule trigger that is configured to be yearly, it denotes the month of the year associated with the trigger. Do note that the months start at 0. For eg: The year starts at January (0) and ends with December (11). strROType String For a Meter Reading trigger, this field is the Trigger Meter (When) Comparison. It is set to l (less than), g (greater than), or empty if not meter reading based. strRRType String It is the Trigger Schedule No End Date. It is set to empty if not time based, n (no end date), b (has a end date). strRType String For a Meter Reading trigger, this field is the Trigger Meter Type. It is set to e (every), o (other), empty if not meter reading based. strTRType String It is the Trigger Reading End type. It is set to n (no end reading), b (end by reading). strTSType String It is the Trigger Schedule Type. It is set to h (hourly), d (daily), w (weekly), m (monthly), y (yearly). strType String This field denotes the type of the Schedule Trigger. It is set to t for Time Schedule trigger, r for Meter Reading Trigger and e for an Event Trigger. strMrLogic String For a Meter Reading trigger, this field is used to determine the logic of the schedule. It is set x (fixed) or t (floating). bolMrByWOClosed boolean If set to true, the Meter Reading trigger should check the reading when the WO is closed. bolCreateWorkOrderOnStartDate boolean If set to true, it indicates that a WorkOrder be created on the start date when the trigger is scheduled. intAssetID Integer Indicates the ID for an Asset associated with the ScheduledMaintenance that creates the trigger. For a Meter Reading trigger, this field needs to be populated with the Asset id of one of the ScheduledMaintenance Assets. strScheduleDescription String The description for the Schedule Trigger. intTRTriggerTime Integer For all the Time Schedule triggers except an hourly trigger, this field specifies time at which it will be triggered. It can have a value between 0 and 23. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Update ScheduleTrigger"},{"location":"ScheduleTrigger/index.html#delete-scheduletrigger","text":"Delete a ScheduleTrigger by Id URL : /api/scheduletrigger/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the ScheduleTrigger. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete ScheduleTrigger"},{"location":"ScheduledMaintenance/index.html","text":"Create ScheduledMaintenance A ScheduledMaintenance represents a Maintenance job that is to be done and executed by the assigned user. It contains information about the ScheduledMaintenance Maintenance Type, Date created, Priority level, Site it resides in, Asset(s) involved, and assigned User. See the MaintennaceType, SheduledMaintenaceUser, SheduledMaintenancePart, and ScheduledMaintenanceAsset objects for more details and information. You can have multiple ScheduledMaintenance associated in your CMMS. Create a ScheduledMaintenance if ScheduledMaintenance does not already exist. URL : /api/scheduledmaintenance Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intPriorityID Integer The ID of the priority level for this scheduled maintenace. For getting possible values, please refer to the Priority section. intSiteID Integer For multi-sites tenants, the ID of the site where the maintenace is taking place at. A site is an asset itself, so for possible values, please refer to the Asset section. intStartAsWorkOrderStatusID Integer An Integer that represents the id of a WorkOrderStatus intScheduledMaintenanceStatusID Integer An integer that represents the status of the ScheduledMaintenance. Possible values STATUS_PAUSED=0, STATUS_PLAYING=1 intSuggestedCompletion Integer The estimated number of days that the generated work order should be completed by. dtmUpdatedDate timestamp The date and time when the ScheduledMaintenace was updated(UNIX epoch miliseconds). strCode String A code that represents the ScheduledMaintenace intProjectId Integer The ID of the Project. strCompletionNotes String A string that represents the completion notes on this ScheduledMaintenace. dtmCreateDate timestamp The date and time when the ScheduledMaintenance was created (UNIX epoch milliseconds). intMaintenanceTypeID Integer An integer that represents the id of the MaintenaceType intRequestorUserID Integer An integer that represents the id of a User who requested the scheduled maintenace. strDescription String As string that represents the description on the ScheduledMaintenance. bolCanFireSMwithOpenWO boolean If set to true, a new work order will be created even if there are existing work orders taht are not closed from this scheduled maintenace. bolWORequiresSignature boolean If set to true, indicates that the Work Orders generated from the ScheduledMaintenance need to be signed. A Work Order generated from the ScheduledMaintenace does not need to be signed if this is set to false. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Create failed } Get all ScheduledMaintenace list Get the all registered ScheduledMaintenace list. URL : /api/scheduledmaintenace Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 5 , intPriorityID : Integer , intSiteID :Object, intStartAsWorkOrderStatusID :3, intScheduledMaintenanceStatusID : Integer , intSuggestedCompletion : Integer , dtmUpdatedDate :2020-11-09T07:35:22.052+00:00, strCode : String , intProjectID :Object, strCompletionNotes : String , dtmCreateDate :2020-11-09T07:35:22.052+00:00, intMaintenanceTypeID : Integer , intRequestorUserID : Integer , strDescription : String , bolCanFireSMWithOpenWO :true, bolWORequiresSignature :true, intAccountID :Object, intChargeDepartmentID :Object, intAssignedToUserID :Object, strWorkInstruction : String , dblTimeEstimatedHours :2.5 __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Get Single ScheduledMaintenace By Id Get a single ScheduledMaintenace by id if current ScheduledMaintenace was registered on it. URL : /api/scheduledmaintenance/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the ScheduledMaintenace. Success Response: Code : 200 success Resonse example { msg : Found! , data : { _id : 5 , intPriorityID : Integer , intSiteID :Object, intStartAsWorkOrderStatusID :3, intScheduledMaintenanceStatusID : Integer , intSuggestedCompletion : Integer , dtmUpdatedDate :2020-11-09T07:35:22.052+00:00, strCode : String , intProjectID :Object, strCompletionNotes : String , dtmCreateDate :2020-11-09T07:35:22.052+00:00, intMaintenanceTypeID : Integer , intRequestorUserID : Integer , strDescription : String , bolCanFireSMWithOpenWO :true, bolWORequiresSignature :true, intAccountID :Object, intChargeDepartmentID :Object, intAssignedToUserID :Object, strWorkInstruction : String , dblTimeEstimatedHours :2.5 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If ScheduledMaintenace does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null } Update ScheduledMaintenace Update the ScheduledMaintenace by Id URL : /api/scheduledmaintenance/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the ScheduledMaintenace. Param Type Description intPriorityID Integer The ID of the priority level for this scheduled maintenace. For getting possible values, please refer to the Priority section. intSiteID Integer For multi-sites tenants, the ID of the site where the maintenace is taking place at. A site is an asset itself, so for possible values, please refer to the Asset section. intStartAsWorkOrderStatusID Integer An Integer that represents the id of a WorkOrderStatus intScheduledMaintenanceStatusID Integer An integer that represents the status of the ScheduledMaintenance. Possible values STATUS_PAUSED=0, STATUS_PLAYING=1 intSuggestedCompletion Integer The estimated number of days that the generated work order should be completed by. dtmUpdatedDate timestamp The date and time when the ScheduledMaintenace was updated(UNIX epoch miliseconds). strCode String A code that represents the ScheduledMaintenace intProjectId Integer The ID of the Project. strCompletionNotes String A string that represents the completion notes on this ScheduledMaintenace. dtmCreateDate timestamp The date and time when the ScheduledMaintenance was created (UNIX epoch milliseconds). intMaintenanceTypeID Integer An integer that represents the id of the MaintenaceType intRequestorUserID Integer An integer that represents the id of a User who requested the scheduled maintenace. strDescription String As string that represents the description on the ScheduledMaintenance. bolCanFireSMwithOpenWO boolean If set to true, a new work order will be created even if there are existing work orders taht are not closed from this scheduled maintenace. bolWORequiresSignature boolean If set to true, indicates that the Work Orders generated from the ScheduledMaintenance need to be signed. A Work Order generated from the ScheduledMaintenace does not need to be signed if this is set to false. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed } Delete ScheduledMaintenace Delete a ScheduledMaintenace by Id URL : /api/scheduledmaintenance/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the ScheduledMaintenace. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses : Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"ScheduledMaintenance"},{"location":"ScheduledMaintenance/index.html#create-scheduledmaintenance","text":"A ScheduledMaintenance represents a Maintenance job that is to be done and executed by the assigned user. It contains information about the ScheduledMaintenance Maintenance Type, Date created, Priority level, Site it resides in, Asset(s) involved, and assigned User. See the MaintennaceType, SheduledMaintenaceUser, SheduledMaintenancePart, and ScheduledMaintenanceAsset objects for more details and information. You can have multiple ScheduledMaintenance associated in your CMMS. Create a ScheduledMaintenance if ScheduledMaintenance does not already exist. URL : /api/scheduledmaintenance Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intPriorityID Integer The ID of the priority level for this scheduled maintenace. For getting possible values, please refer to the Priority section. intSiteID Integer For multi-sites tenants, the ID of the site where the maintenace is taking place at. A site is an asset itself, so for possible values, please refer to the Asset section. intStartAsWorkOrderStatusID Integer An Integer that represents the id of a WorkOrderStatus intScheduledMaintenanceStatusID Integer An integer that represents the status of the ScheduledMaintenance. Possible values STATUS_PAUSED=0, STATUS_PLAYING=1 intSuggestedCompletion Integer The estimated number of days that the generated work order should be completed by. dtmUpdatedDate timestamp The date and time when the ScheduledMaintenace was updated(UNIX epoch miliseconds). strCode String A code that represents the ScheduledMaintenace intProjectId Integer The ID of the Project. strCompletionNotes String A string that represents the completion notes on this ScheduledMaintenace. dtmCreateDate timestamp The date and time when the ScheduledMaintenance was created (UNIX epoch milliseconds). intMaintenanceTypeID Integer An integer that represents the id of the MaintenaceType intRequestorUserID Integer An integer that represents the id of a User who requested the scheduled maintenace. strDescription String As string that represents the description on the ScheduledMaintenance. bolCanFireSMwithOpenWO boolean If set to true, a new work order will be created even if there are existing work orders taht are not closed from this scheduled maintenace. bolWORequiresSignature boolean If set to true, indicates that the Work Orders generated from the ScheduledMaintenance need to be signed. A Work Order generated from the ScheduledMaintenace does not need to be signed if this is set to false. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 5 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Create failed }","title":"Create ScheduledMaintenance"},{"location":"ScheduledMaintenance/index.html#get-all-scheduledmaintenace-list","text":"Get the all registered ScheduledMaintenace list. URL : /api/scheduledmaintenace Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 5 , intPriorityID : Integer , intSiteID :Object, intStartAsWorkOrderStatusID :3, intScheduledMaintenanceStatusID : Integer , intSuggestedCompletion : Integer , dtmUpdatedDate :2020-11-09T07:35:22.052+00:00, strCode : String , intProjectID :Object, strCompletionNotes : String , dtmCreateDate :2020-11-09T07:35:22.052+00:00, intMaintenanceTypeID : Integer , intRequestorUserID : Integer , strDescription : String , bolCanFireSMWithOpenWO :true, bolWORequiresSignature :true, intAccountID :Object, intChargeDepartmentID :Object, intAssignedToUserID :Object, strWorkInstruction : String , dblTimeEstimatedHours :2.5 __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all ScheduledMaintenace list"},{"location":"ScheduledMaintenance/index.html#get-single-scheduledmaintenace-by-id","text":"Get a single ScheduledMaintenace by id if current ScheduledMaintenace was registered on it. URL : /api/scheduledmaintenance/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the ScheduledMaintenace. Success Response: Code : 200 success Resonse example { msg : Found! , data : { _id : 5 , intPriorityID : Integer , intSiteID :Object, intStartAsWorkOrderStatusID :3, intScheduledMaintenanceStatusID : Integer , intSuggestedCompletion : Integer , dtmUpdatedDate :2020-11-09T07:35:22.052+00:00, strCode : String , intProjectID :Object, strCompletionNotes : String , dtmCreateDate :2020-11-09T07:35:22.052+00:00, intMaintenanceTypeID : Integer , intRequestorUserID : Integer , strDescription : String , bolCanFireSMWithOpenWO :true, bolWORequiresSignature :true, intAccountID :Object, intChargeDepartmentID :Object, intAssignedToUserID :Object, strWorkInstruction : String , dblTimeEstimatedHours :2.5 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If ScheduledMaintenace does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null }","title":"Get Single ScheduledMaintenace By Id"},{"location":"ScheduledMaintenance/index.html#update-scheduledmaintenace","text":"Update the ScheduledMaintenace by Id URL : /api/scheduledmaintenance/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the ScheduledMaintenace. Param Type Description intPriorityID Integer The ID of the priority level for this scheduled maintenace. For getting possible values, please refer to the Priority section. intSiteID Integer For multi-sites tenants, the ID of the site where the maintenace is taking place at. A site is an asset itself, so for possible values, please refer to the Asset section. intStartAsWorkOrderStatusID Integer An Integer that represents the id of a WorkOrderStatus intScheduledMaintenanceStatusID Integer An integer that represents the status of the ScheduledMaintenance. Possible values STATUS_PAUSED=0, STATUS_PLAYING=1 intSuggestedCompletion Integer The estimated number of days that the generated work order should be completed by. dtmUpdatedDate timestamp The date and time when the ScheduledMaintenace was updated(UNIX epoch miliseconds). strCode String A code that represents the ScheduledMaintenace intProjectId Integer The ID of the Project. strCompletionNotes String A string that represents the completion notes on this ScheduledMaintenace. dtmCreateDate timestamp The date and time when the ScheduledMaintenance was created (UNIX epoch milliseconds). intMaintenanceTypeID Integer An integer that represents the id of the MaintenaceType intRequestorUserID Integer An integer that represents the id of a User who requested the scheduled maintenace. strDescription String As string that represents the description on the ScheduledMaintenance. bolCanFireSMwithOpenWO boolean If set to true, a new work order will be created even if there are existing work orders taht are not closed from this scheduled maintenace. bolWORequiresSignature boolean If set to true, indicates that the Work Orders generated from the ScheduledMaintenance need to be signed. A Work Order generated from the ScheduledMaintenace does not need to be signed if this is set to false. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Update failed }","title":"Update ScheduledMaintenace"},{"location":"ScheduledMaintenance/index.html#delete-scheduledmaintenace","text":"Delete a ScheduledMaintenace by Id URL : /api/scheduledmaintenance/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the ScheduledMaintenace. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses : Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete ScheduledMaintenace"},{"location":"User/index.html","text":"Create User This object represents a user that can access and use the CMMS or a user group. Note: Only inactive users can be added through the API (with intUserStatusID set to 0). The user has to be activated using the CMMS. Create an User if User does not already exist. URL : /api/users/register Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Required Type Description strFullName yes String The full name of the user or user group. intUserStatusID optional Integer This can take the value 0 or 1 . A status 1 means that the user is active, whereas a status 0 means that the user is currently not activated and cannot access and use the CMMS. strTelephone2 optional String Secondary phone number. strEmailAddress yes String Email address. strUserTitle optional String The title of the user. For example : \"Head of Operations\" or \"Program Director\" . strPersonnelCode optional String Field that can be used to store a personnel code associated to this user. strUserName yes String The username that will be used by the user to access the CMMS. strTelephone yes String Primary phone number. strNotes optional String This fied can contain technical notes about the user. For example : \"Data imported from V2: language=English\" . strRequestNotes optional String Contains a string stating when the account was created. For example : \"Wed Nov 23 09:43:49 EST 2011: Account created.\" . bolGroup optional boolean This can take the value 0 or 1 or null. A value of 1 means the object represents a user group. bolApiManaged optional boolean The boolean value represents if the user is created through the API, in an external system. User information is managed in the Originating system. strPreferences optional String Technical string defining the user's preferences. password yes String user's password. passwordconfirm yes String password confirm. Data example All fields must be sent. { strFullName : first last , strTelephone : 5141257 , strEmailAddress : test@gmai.com , bolGroup :true, password : test!@3 , passwordconfirm : test!@3 , ... ... } Success Response: Code : 200 success Resonse example { msg : User added successfully!!! , data : {id: 5f68a89c247532232419483c } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed. Code : 400 BAD REQUEST Content example { msg : Email is required } Or Condition : Internal Server Error. Code : 500 Content example { msg : Internal Server error , } Get all user list Get the all registered user list. URL : /api/users/userlist Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : null, data : [ { _id : 5f6212d8ed7daa16dcbf44ca , strFullName : test demo , strEmailAddress : pavel@gmail.com , strTelephone : 123456 , strTelephone2 : 1 , intUserStatusID : 1, strUserTitle : 2 , strPersonnelCode : , strUserName : 3 , strNotes : 4 , strRequestNotes : sdfddd , bolGroup : true, bolApiManaged : true, strPreferences : 6 , __v : 0 }, { _id : 5f68a89c247532232419483c , strFullName : ttest pavel , strEmailAddress : olga@gmail.com , strTelephone : 45789 , strTelephone2 : , intUserStatusID : 0, strUserTitle : , strPersonnelCode : , strUserName : , strNotes : , strRequestNotes : , bolGroup : false, bolApiManaged : false, strPreferences : , __v : 0 } ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error , data :null } Get Single User By Id Get a single User by id if current user was registered on it. URL : /api/users/:uid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the user. Success Response: Code : 200 success Resonse example { msg : null, data : { user : { _id : 5f6212d8ed7daa16dcbf44ca , strFullName : test demo , password : $2b$10$jIqho0m8oHKsXTNIk6xFcu0kSBme4zNieLyrm.cFDLYMCpVzRcKPq , strEmailAddress : test@gmail.com , strTelephone : strTelephone , strTelephone2 : , intUserStatusID : 1, strUserTitle : strUserTitle , strPersonnelCode : , strUserName : 3 , strNotes : strNotes , strRequestNotes : strRequste notes , bolGroup : true, bolApiManaged : true, strPreferences : 6 , __v : 0 } } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If user does not exist on server. Code : 404 Not Found Content example { msg : User not found , data :null } Update User Update the User by Id URL : /api/users/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the user. Param Required Type Description strFullName yes String The full name of the user or user group. intUserStatusID optional Integer This can take the value 0 or 1 . A status 1 means that the user is active, whereas a status 0 means that the user is currently not activated and cannot access and use the CMMS. strTelephone2 optional String Secondary phone number. strEmailAddress yes String Email address. strUserTitle optional String The title of the user. For example : \"Head of Operations\" or \"Program Director\" . strPersonnelCode optional String Field that can be used to store a personnel code associated to this user. strUserName yes String The username that will be used by the user to access the CMMS. strTelephone yes String Primary phone number. strNotes optional String This fied can contain technical notes about the user. For example : \"Data imported from V2: language=English\" . strRequestNotes optional String Contains a string stating when the account was created. For example : \"Wed Nov 23 09:43:49 EST 2011: Account created.\" . bolGroup optional boolean This can take the value 0 or 1 or null. A value of 1 means the object represents a user group. bolApiManaged optional boolean The boolean value represents if the user is created through the API, in an external system. User information is managed in the Originating system. strPreferences optional String Technical string defining the user's preferences. password yes String user's password. passwordconfirm yes String password confirm. Data example All fields must be sent. { strFullName : first last , strTelephone : 5141257 , strEmailAddress : test@gmai.com , bolGroup :true, password : test!@3 , passwordconfirm : test!@3 , ... ... } Success Response: Code : 200 success Resonse example { msg : User updated successfully! , data: user : { _id : 5f6212d8ed7daa16dcbf44ca , strFullName : first last , strEmailAddress : test@gmail.com , strTelephone : 5141257 , strTelephone2 : , intUserStatusID : 1, strUserTitle : strUserTitle , strPersonnelCode : , strUserName : 3 , strNotes : strNotes , strRequestNotes : strRequste notes , bolGroup : true, bolApiManaged : true, strPreferences : 6 , __v : 0 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed. Code : 400 BAD REQUEST Content example { msg : Update failed , data :null } Or Condition : Internal Server Error. Code : 500 Content example { msg : Internal Server error , data :null } Delete User Delete the User by Id URL : /api/users/:uid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the user. Success Response: Code : 200 success Resonse example { msg : User deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no User available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"User"},{"location":"User/index.html#create-user","text":"This object represents a user that can access and use the CMMS or a user group. Note: Only inactive users can be added through the API (with intUserStatusID set to 0). The user has to be activated using the CMMS. Create an User if User does not already exist. URL : /api/users/register Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Required Type Description strFullName yes String The full name of the user or user group. intUserStatusID optional Integer This can take the value 0 or 1 . A status 1 means that the user is active, whereas a status 0 means that the user is currently not activated and cannot access and use the CMMS. strTelephone2 optional String Secondary phone number. strEmailAddress yes String Email address. strUserTitle optional String The title of the user. For example : \"Head of Operations\" or \"Program Director\" . strPersonnelCode optional String Field that can be used to store a personnel code associated to this user. strUserName yes String The username that will be used by the user to access the CMMS. strTelephone yes String Primary phone number. strNotes optional String This fied can contain technical notes about the user. For example : \"Data imported from V2: language=English\" . strRequestNotes optional String Contains a string stating when the account was created. For example : \"Wed Nov 23 09:43:49 EST 2011: Account created.\" . bolGroup optional boolean This can take the value 0 or 1 or null. A value of 1 means the object represents a user group. bolApiManaged optional boolean The boolean value represents if the user is created through the API, in an external system. User information is managed in the Originating system. strPreferences optional String Technical string defining the user's preferences. password yes String user's password. passwordconfirm yes String password confirm. Data example All fields must be sent. { strFullName : first last , strTelephone : 5141257 , strEmailAddress : test@gmai.com , bolGroup :true, password : test!@3 , passwordconfirm : test!@3 , ... ... } Success Response: Code : 200 success Resonse example { msg : User added successfully!!! , data : {id: 5f68a89c247532232419483c } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed. Code : 400 BAD REQUEST Content example { msg : Email is required } Or Condition : Internal Server Error. Code : 500 Content example { msg : Internal Server error , }","title":"Create User"},{"location":"User/index.html#get-all-user-list","text":"Get the all registered user list. URL : /api/users/userlist Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : null, data : [ { _id : 5f6212d8ed7daa16dcbf44ca , strFullName : test demo , strEmailAddress : pavel@gmail.com , strTelephone : 123456 , strTelephone2 : 1 , intUserStatusID : 1, strUserTitle : 2 , strPersonnelCode : , strUserName : 3 , strNotes : 4 , strRequestNotes : sdfddd , bolGroup : true, bolApiManaged : true, strPreferences : 6 , __v : 0 }, { _id : 5f68a89c247532232419483c , strFullName : ttest pavel , strEmailAddress : olga@gmail.com , strTelephone : 45789 , strTelephone2 : , intUserStatusID : 0, strUserTitle : , strPersonnelCode : , strUserName : , strNotes : , strRequestNotes : , bolGroup : false, bolApiManaged : false, strPreferences : , __v : 0 } ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error , data :null }","title":"Get all user list"},{"location":"User/index.html#get-single-user-by-id","text":"Get a single User by id if current user was registered on it. URL : /api/users/:uid Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the user. Success Response: Code : 200 success Resonse example { msg : null, data : { user : { _id : 5f6212d8ed7daa16dcbf44ca , strFullName : test demo , password : $2b$10$jIqho0m8oHKsXTNIk6xFcu0kSBme4zNieLyrm.cFDLYMCpVzRcKPq , strEmailAddress : test@gmail.com , strTelephone : strTelephone , strTelephone2 : , intUserStatusID : 1, strUserTitle : strUserTitle , strPersonnelCode : , strUserName : 3 , strNotes : strNotes , strRequestNotes : strRequste notes , bolGroup : true, bolApiManaged : true, strPreferences : 6 , __v : 0 } } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If user does not exist on server. Code : 404 Not Found Content example { msg : User not found , data :null }","title":"Get Single User By Id"},{"location":"User/index.html#update-user","text":"Update the User by Id URL : /api/users/:uid Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the user. Param Required Type Description strFullName yes String The full name of the user or user group. intUserStatusID optional Integer This can take the value 0 or 1 . A status 1 means that the user is active, whereas a status 0 means that the user is currently not activated and cannot access and use the CMMS. strTelephone2 optional String Secondary phone number. strEmailAddress yes String Email address. strUserTitle optional String The title of the user. For example : \"Head of Operations\" or \"Program Director\" . strPersonnelCode optional String Field that can be used to store a personnel code associated to this user. strUserName yes String The username that will be used by the user to access the CMMS. strTelephone yes String Primary phone number. strNotes optional String This fied can contain technical notes about the user. For example : \"Data imported from V2: language=English\" . strRequestNotes optional String Contains a string stating when the account was created. For example : \"Wed Nov 23 09:43:49 EST 2011: Account created.\" . bolGroup optional boolean This can take the value 0 or 1 or null. A value of 1 means the object represents a user group. bolApiManaged optional boolean The boolean value represents if the user is created through the API, in an external system. User information is managed in the Originating system. strPreferences optional String Technical string defining the user's preferences. password yes String user's password. passwordconfirm yes String password confirm. Data example All fields must be sent. { strFullName : first last , strTelephone : 5141257 , strEmailAddress : test@gmai.com , bolGroup :true, password : test!@3 , passwordconfirm : test!@3 , ... ... } Success Response: Code : 200 success Resonse example { msg : User updated successfully! , data: user : { _id : 5f6212d8ed7daa16dcbf44ca , strFullName : first last , strEmailAddress : test@gmail.com , strTelephone : 5141257 , strTelephone2 : , intUserStatusID : 1, strUserTitle : strUserTitle , strPersonnelCode : , strUserName : 3 , strNotes : strNotes , strRequestNotes : strRequste notes , bolGroup : true, bolApiManaged : true, strPreferences : 6 , __v : 0 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed. Code : 400 BAD REQUEST Content example { msg : Update failed , data :null } Or Condition : Internal Server Error. Code : 500 Content example { msg : Internal Server error , data :null }","title":"Update User"},{"location":"User/index.html#delete-user","text":"Delete the User by Id URL : /api/users/:uid Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the user. Success Response: Code : 200 success Resonse example { msg : User deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no User available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete User"},{"location":"WorkOrder/index.html","text":"Create WorkOrder This object is used to represent work orders. A work order is a set of maintenance tasks that have to be executed by some assigned users on a given asset. Create an WorkOrder if WorkOrder does not already exist. URL : /api/workorder Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intPriorityID Integer The ID of the priority level of the task. For getting possible values, please refer to the Priority section. intWorkOrderStatusID Integer The ID of the current status of the work order. For possible values, please refer to the WorkOrderStatus section. intSiteID Integer For multi-sites tenants, the ID of the site the work order is related to. A site is an asset itself, so for possible values, please refer to the Asset section. intRequestedByUserID Integer The ID of the user who requested the work order. For getting possible values, please refer to the User section. strEmailUserGuest String Work orders can be requested by guests without having to log into the CMMS. In this case, this field gives the email address of the person who submitted the work order. dtmDateCreated timestamp The date and time when the work order was created. dtmDateCompleted timestamp The date and time when the work order was completed. intCompletedByUserID Integer The ID of the user who requested the work order. strDescription String A short text describing the work order. strNameUserGuest String Work orders can be requested by guests without having to log into the CMMS. In this case, this field gives the name of the person who submitted the work order. dtmSuggestedCompletionDate timestamp The date and time when the work order should be completed. strPhoneUserGuest String Work orders can be requested by guests without having to log into the CMMS. In this case, this field gives the phone number of the person who submitted the work order. strCode String An unique code for referencing the work order. Work order codes are automatically generated by the CMMS. For example : \"2009-02-05.0004.00004\" . strCompletionNotes String This field can be used to input some notes upon the completion of the work order. intMaintenanceTypeID Integer An ID referring to the maintenance type of the work order. dtmDateLastModified timestamp The date and time when the work order was modified for the last time. strAdminNotes String This field can be used by the administrator to input some notes upon the completion of the work order. intRCAActionID Integer For Enterprise tenants only. An ID that indicates the action/solution for a problem code. Problems, causes, and actions must be configured in the tenant to use this field. intRCACauseID Integer For Enterprise tenants only. An ID that indicates the root cause for a problem code. Problems, causes, and actions must be configured in the tenant to use this field. intRCAProblemID Integer For Enterprise tenants only. An ID that indicates the root cause for a problem code on a specific asset or asset category. Problems, causes, and actions must be configured in the tenant to use this field. Data example { intPriorityID : 4156, intSiteID : 9, strCode : 2009-02-05.0004.00004 , strCompletionNotes : strCompletionNotes , intRCACauseID : 4 ... ... } Success Response: Code : 200 success Resonse example { msg : WorkOrder added successfully! , data : {id: 4rt8a89c24753232419483c } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : intWorkOrderStatusID is required } { msg : Create failed } Get all workorder list Get the all registered workorder list. URL : /api/workorder Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : WorkOrder list found! , data : [ { _id : 5f6a6f90d9741d152c754178 , intPriorityID : 11, intWorkOrderStatusID : 22, intSiteID : 33, intRequestedByUserID : null, strEmailUserGuest : , dtmDateCreated : , dtmDateCompleted : , intCompletedByUserID : null, strDescription : , strNameUserGuest : , dtmSuggestedCompletionDate : , strPhoneUserGuest : , strCode : , strCompletionNotes : , intMaintenanceTypeID : null, dtmDateLastModified : , strAdminNotes : , intRCAActionID : null, intRCACauseID : null, intRCAProblemID : null, __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error. } Get Single WorkOrder By Id Get a single Workorder by id if current workorder was registered on it. URL : /api/workorder/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorder. Success Response: Code : 200 success Resonse example { msg : Workorder found! , data : { _id : 5f6896897b9884253cf6bdb6 , strAssignedUserIds : 13 8 9 intPriorityID : 4156, intWorkOrderStatusID : 4, strAssets : ASSET ABC (0010), ASSET DEF (0011) intSiteID : 3345, strAssignedUsers : John Doe, Samuel Smith , intRequestedByUserID : 667, strEmailUserGuest: , dtmDateCreated: , strAssetIds: 9 78 675 , dtmDateCompleted: , intCompletedByUserID:555 ... } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If workorder does not exist on server. Code : 404 Not Found Content example { msg : WorkOrder not found , data :null } Update WorkOrder Update the WorkOrder by Id URL : /api/workorder/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorder. Param Type Description intPriorityID Integer The ID of the priority level of the task. For getting possible values, please refer to the Priority section. intWorkOrderStatusID Integer The ID of the current status of the work order. For possible values, please refer to the WorkOrderStatus section. intSiteID Integer For multi-sites tenants, the ID of the site the work order is related to. A site is an asset itself, so for possible values, please refer to the Asset section. intRequestedByUserID Integer The ID of the user who requested the work order. For getting possible values, please refer to the User section. strEmailUserGuest String Work orders can be requested by guests without having to log into the CMMS. In this case, this field gives the email address of the person who submitted the work order. dtmDateCreated timestamp The date and time when the work order was created. dtmDateCompleted timestamp The date and time when the work order was completed. intCompletedByUserID Integer The ID of the user who requested the work order. strDescription String A short text describing the work order. strNameUserGuest String Work orders can be requested by guests without having to log into the CMMS. In this case, this field gives the name of the person who submitted the work order. dtmSuggestedCompletionDate timestamp The date and time when the work order should be completed. strPhoneUserGuest String Work orders can be requested by guests without having to log into the CMMS. In this case, this field gives the phone number of the person who submitted the work order. strCode String An unique code for referencing the work order. Work order codes are automatically generated by the CMMS. For example : \"2009-02-05.0004.00004\" . strCompletionNotes String This field can be used to input some notes upon the completion of the work order. intMaintenanceTypeID Integer An ID referring to the maintenance type of the work order. dtmDateLastModified timestamp The date and time when the work order was modified for the last time. strAdminNotes String This field can be used by the administrator to input some notes upon the completion of the work order. intRCAActionID Integer For Enterprise tenants only. An ID that indicates the action/solution for a problem code. Problems, causes, and actions must be configured in the tenant to use this field. intRCACauseID Integer For Enterprise tenants only. An ID that indicates the root cause for a problem code. Problems, causes, and actions must be configured in the tenant to use this field. intRCAProblemID Integer For Enterprise tenants only. An ID that indicates the root cause for a problem code on a specific asset or asset category. Problems, causes, and actions must be configured in the tenant to use this field. Data example { intPriorityID : 556, strDescription : example of strDescription , strNameUserGuest : str_Name_User_Guest , strPhoneUserGuest : str_PhoneUser_Guest , strCode : 2019-12-05.0004.00004 ... ... } Success Response: Code : 200 success Resonse example { msg : WorkOrder updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed } Delete WorkOrder Delete a WorkOrder by Id URL : /api/workorder/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorder. Success Response: Code : 200 success Resonse example { msg : Workorder deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"WorkOrder"},{"location":"WorkOrder/index.html#create-workorder","text":"This object is used to represent work orders. A work order is a set of maintenance tasks that have to be executed by some assigned users on a given asset. Create an WorkOrder if WorkOrder does not already exist. URL : /api/workorder Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intPriorityID Integer The ID of the priority level of the task. For getting possible values, please refer to the Priority section. intWorkOrderStatusID Integer The ID of the current status of the work order. For possible values, please refer to the WorkOrderStatus section. intSiteID Integer For multi-sites tenants, the ID of the site the work order is related to. A site is an asset itself, so for possible values, please refer to the Asset section. intRequestedByUserID Integer The ID of the user who requested the work order. For getting possible values, please refer to the User section. strEmailUserGuest String Work orders can be requested by guests without having to log into the CMMS. In this case, this field gives the email address of the person who submitted the work order. dtmDateCreated timestamp The date and time when the work order was created. dtmDateCompleted timestamp The date and time when the work order was completed. intCompletedByUserID Integer The ID of the user who requested the work order. strDescription String A short text describing the work order. strNameUserGuest String Work orders can be requested by guests without having to log into the CMMS. In this case, this field gives the name of the person who submitted the work order. dtmSuggestedCompletionDate timestamp The date and time when the work order should be completed. strPhoneUserGuest String Work orders can be requested by guests without having to log into the CMMS. In this case, this field gives the phone number of the person who submitted the work order. strCode String An unique code for referencing the work order. Work order codes are automatically generated by the CMMS. For example : \"2009-02-05.0004.00004\" . strCompletionNotes String This field can be used to input some notes upon the completion of the work order. intMaintenanceTypeID Integer An ID referring to the maintenance type of the work order. dtmDateLastModified timestamp The date and time when the work order was modified for the last time. strAdminNotes String This field can be used by the administrator to input some notes upon the completion of the work order. intRCAActionID Integer For Enterprise tenants only. An ID that indicates the action/solution for a problem code. Problems, causes, and actions must be configured in the tenant to use this field. intRCACauseID Integer For Enterprise tenants only. An ID that indicates the root cause for a problem code. Problems, causes, and actions must be configured in the tenant to use this field. intRCAProblemID Integer For Enterprise tenants only. An ID that indicates the root cause for a problem code on a specific asset or asset category. Problems, causes, and actions must be configured in the tenant to use this field. Data example { intPriorityID : 4156, intSiteID : 9, strCode : 2009-02-05.0004.00004 , strCompletionNotes : strCompletionNotes , intRCACauseID : 4 ... ... } Success Response: Code : 200 success Resonse example { msg : WorkOrder added successfully! , data : {id: 4rt8a89c24753232419483c } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : intWorkOrderStatusID is required } { msg : Create failed }","title":"Create WorkOrder"},{"location":"WorkOrder/index.html#get-all-workorder-list","text":"Get the all registered workorder list. URL : /api/workorder Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : WorkOrder list found! , data : [ { _id : 5f6a6f90d9741d152c754178 , intPriorityID : 11, intWorkOrderStatusID : 22, intSiteID : 33, intRequestedByUserID : null, strEmailUserGuest : , dtmDateCreated : , dtmDateCompleted : , intCompletedByUserID : null, strDescription : , strNameUserGuest : , dtmSuggestedCompletionDate : , strPhoneUserGuest : , strCode : , strCompletionNotes : , intMaintenanceTypeID : null, dtmDateLastModified : , strAdminNotes : , intRCAActionID : null, intRCACauseID : null, intRCAProblemID : null, __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error. }","title":"Get all workorder list"},{"location":"WorkOrder/index.html#get-single-workorder-by-id","text":"Get a single Workorder by id if current workorder was registered on it. URL : /api/workorder/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorder. Success Response: Code : 200 success Resonse example { msg : Workorder found! , data : { _id : 5f6896897b9884253cf6bdb6 , strAssignedUserIds : 13 8 9 intPriorityID : 4156, intWorkOrderStatusID : 4, strAssets : ASSET ABC (0010), ASSET DEF (0011) intSiteID : 3345, strAssignedUsers : John Doe, Samuel Smith , intRequestedByUserID : 667, strEmailUserGuest: , dtmDateCreated: , strAssetIds: 9 78 675 , dtmDateCompleted: , intCompletedByUserID:555 ... } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If workorder does not exist on server. Code : 404 Not Found Content example { msg : WorkOrder not found , data :null }","title":"Get Single WorkOrder By Id"},{"location":"WorkOrder/index.html#update-workorder","text":"Update the WorkOrder by Id URL : /api/workorder/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorder. Param Type Description intPriorityID Integer The ID of the priority level of the task. For getting possible values, please refer to the Priority section. intWorkOrderStatusID Integer The ID of the current status of the work order. For possible values, please refer to the WorkOrderStatus section. intSiteID Integer For multi-sites tenants, the ID of the site the work order is related to. A site is an asset itself, so for possible values, please refer to the Asset section. intRequestedByUserID Integer The ID of the user who requested the work order. For getting possible values, please refer to the User section. strEmailUserGuest String Work orders can be requested by guests without having to log into the CMMS. In this case, this field gives the email address of the person who submitted the work order. dtmDateCreated timestamp The date and time when the work order was created. dtmDateCompleted timestamp The date and time when the work order was completed. intCompletedByUserID Integer The ID of the user who requested the work order. strDescription String A short text describing the work order. strNameUserGuest String Work orders can be requested by guests without having to log into the CMMS. In this case, this field gives the name of the person who submitted the work order. dtmSuggestedCompletionDate timestamp The date and time when the work order should be completed. strPhoneUserGuest String Work orders can be requested by guests without having to log into the CMMS. In this case, this field gives the phone number of the person who submitted the work order. strCode String An unique code for referencing the work order. Work order codes are automatically generated by the CMMS. For example : \"2009-02-05.0004.00004\" . strCompletionNotes String This field can be used to input some notes upon the completion of the work order. intMaintenanceTypeID Integer An ID referring to the maintenance type of the work order. dtmDateLastModified timestamp The date and time when the work order was modified for the last time. strAdminNotes String This field can be used by the administrator to input some notes upon the completion of the work order. intRCAActionID Integer For Enterprise tenants only. An ID that indicates the action/solution for a problem code. Problems, causes, and actions must be configured in the tenant to use this field. intRCACauseID Integer For Enterprise tenants only. An ID that indicates the root cause for a problem code. Problems, causes, and actions must be configured in the tenant to use this field. intRCAProblemID Integer For Enterprise tenants only. An ID that indicates the root cause for a problem code on a specific asset or asset category. Problems, causes, and actions must be configured in the tenant to use this field. Data example { intPriorityID : 556, strDescription : example of strDescription , strNameUserGuest : str_Name_User_Guest , strPhoneUserGuest : str_PhoneUser_Guest , strCode : 2019-12-05.0004.00004 ... ... } Success Response: Code : 200 success Resonse example { msg : WorkOrder updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Update WorkOrder"},{"location":"WorkOrder/index.html#delete-workorder","text":"Delete a WorkOrder by Id URL : /api/workorder/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorder. Success Response: Code : 200 success Resonse example { msg : Workorder deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete WorkOrder"},{"location":"WorkOrderStatus/index.html","text":"Create WorkOrderStatus Create a WorkOrderStatus if WorkOrderStatus does not already exist. URL : /api/workorderstatus Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Required Type Description strName String The display name of the status. intControlID Yes Integer The control ID is used to associated the status with a more general state of the work order workflow. Possible values are :100 for Pending, 101 for Active, 102 for Closed and 103 for Draft. intSysCode Integer The system codes are used to identify statuses with a special meaning for the CMMS. Possible values are:2 for Requested, 3 for Assigned, 4 for Open, 5 for Work In Progress, 6 for On Hold, 7 for Closed, Completed,8 for Draft and 9 for Closed, Incomplete. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 12 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : intControlID is required } { msg : Create failed } Get all WorkOrderStatus list Get the all registered WorkOrderStatus list. URL : /api/workorderstatus Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : WorkOrder list found! , data : [ { _id : 11 , strName : String intControlID : 100, intSysCode : 3, intUpdated : 2020-11-09T07:35:22.052+00:00, __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Get Single WorkOrderStatus By Id Get a single WorkOrderStatus by id if current WorkOrderStatus was registered on it. URL : /api/workorderstatus/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorder. Success Response: Code : 200 success Resonse example { msg : Workorder found! , data : { _id : 11 , strName : String intControlID : 100, intSysCode : 3, intUpdated : 2020-11-09T07:35:22.052+00:00, } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If workorderstatus does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null } Update WorkOrderStatus Update the WorkOrderStatus by Id URL : /api/workorderstatus/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the WorkOrderStatus. Param Required Type Description strName String The display name of the status. intControlID Yes Integer The control ID is used to associated the status with a more general state of the work order workflow. Possible values are :100 for Pending, 101 for Active, 102 for Closed and 103 for Draft. intSysCode Integer The system codes are used to identify statuses with a special meaning for the CMMS. Possible values are:2 for Requested, 3 for Assigned, 4 for Open, 5 for Work In Progress, 6 for On Hold, 7 for Closed, Completed,8 for Draft and 9 for Closed, Incomplete. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed } Delete WorkOrderStatus Delete a WorkOrderStatus by Id URL : /api/workorderstatus/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the WorkOrderStatus. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"WorkOrderStatus"},{"location":"WorkOrderStatus/index.html#create-workorderstatus","text":"Create a WorkOrderStatus if WorkOrderStatus does not already exist. URL : /api/workorderstatus Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Required Type Description strName String The display name of the status. intControlID Yes Integer The control ID is used to associated the status with a more general state of the work order workflow. Possible values are :100 for Pending, 101 for Active, 102 for Closed and 103 for Draft. intSysCode Integer The system codes are used to identify statuses with a special meaning for the CMMS. Possible values are:2 for Requested, 3 for Assigned, 4 for Open, 5 for Work In Progress, 6 for On Hold, 7 for Closed, Completed,8 for Draft and 9 for Closed, Incomplete. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 12 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : intControlID is required } { msg : Create failed }","title":"Create WorkOrderStatus"},{"location":"WorkOrderStatus/index.html#get-all-workorderstatus-list","text":"Get the all registered WorkOrderStatus list. URL : /api/workorderstatus Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : WorkOrder list found! , data : [ { _id : 11 , strName : String intControlID : 100, intSysCode : 3, intUpdated : 2020-11-09T07:35:22.052+00:00, __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Get all WorkOrderStatus list"},{"location":"WorkOrderStatus/index.html#get-single-workorderstatus-by-id","text":"Get a single WorkOrderStatus by id if current WorkOrderStatus was registered on it. URL : /api/workorderstatus/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the workorder. Success Response: Code : 200 success Resonse example { msg : Workorder found! , data : { _id : 11 , strName : String intControlID : 100, intSysCode : 3, intUpdated : 2020-11-09T07:35:22.052+00:00, } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If workorderstatus does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null }","title":"Get Single WorkOrderStatus By Id"},{"location":"WorkOrderStatus/index.html#update-workorderstatus","text":"Update the WorkOrderStatus by Id URL : /api/workorderstatus/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the WorkOrderStatus. Param Required Type Description strName String The display name of the status. intControlID Yes Integer The control ID is used to associated the status with a more general state of the work order workflow. Possible values are :100 for Pending, 101 for Active, 102 for Closed and 103 for Draft. intSysCode Integer The system codes are used to identify statuses with a special meaning for the CMMS. Possible values are:2 for Requested, 3 for Assigned, 4 for Open, 5 for Work In Progress, 6 for On Hold, 7 for Closed, Completed,8 for Draft and 9 for Closed, Incomplete. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Update WorkOrderStatus"},{"location":"WorkOrderStatus/index.html#delete-workorderstatus","text":"Delete a WorkOrderStatus by Id URL : /api/workorderstatus/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the WorkOrderStatus. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete WorkOrderStatus"},{"location":"WorkOrderTask/index.html","text":"Create WorkOrderTask A work order consists of a set of tasks that must be executed by some assigned users on a set of assets. This object represents those tasks. Create a WorkOrderTask if WorkOrderTask does not already exist. URL : /api/workordertask Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intWorkOrderID Integer The ID of the work order the task is part of. For getting possible values, please refer to the WorkOrder section. intTaskType Integer An integer representing the type of the task. Possible values are : 0 for General, 1 for Text Result, 2 for Meter Reading, and 3 for Inspection Task. strResult String In case of a Text Result task, a text explaining the output of the task. intAssetID Integer The ID of the asset the task should be executed on. For getting possible values, please refer to the Asset section. intOrder Integer An integer used for ordering the tasks inside the work order. dtmStartDate timestamp The date and time when the task is scheduled to be worked on. dtmDateCompleted timestamp The date and time when the task was completed. intCompletedByUserID Integer The ID of the user who competed the task. For getting possible values, please refer to the User section. intAssignedToUserID Integer The ID of the user the task is assigned to. For getting possible values, please refer to the User section. dblTimeSpentHours Double The actual hours that were spent on the task. intMeterReadingUnitID Double In case of a Meter Reading task, the ID of the unit used for the meter reading. For getting all possible values, please refer to the MeterReadingUnit section. strDescription String A short description of the task itself. strTaskNotesCompletion String This field can be used to store some notes upon the completion of the task. intTaskGroupControlID Integer An integer representing the id of the task group. intParentWorkOrderTaskID Integer An integer representing the id of the parent work order task. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 12 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Create failed } Read all WorkOrderTask list Get the all registered WorkOrderTask list. URL : /api/workordertask Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 11 , intWorkOrderID : 1234, dtmDateCompleted : 2020-11-26T09:00:36.285+00:00, intCompletedByUserID : 9876, dblTimeSpentHours : 4, intMeterReadingUnitID : 9010, strTaskNotesCompletion : The meter reading is over 9000 , ... __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error } Get Single WorkOrderTask By Id Get a single WorkOrderTask by id if current WorkOrderTask was registered on it. URL : /api/workordertask/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the WorkOrderTask. Success Response : Code : 200 success Resonse example { msg : Found! , data : { _id : 11, intWorkOrderID : 1234, dtmDateCompleted : 2020-11-26T09:00:36.285+00:00, intCompletedByUserID : 9876, dblTimeSpentHours : 4, intMeterReadingUnitID : 9010, strTaskNotesCompletion : The meter reading is over 9000 , ... } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If workordertask does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null } Update WorkOrderTask Update the WorkOrderTask by Id URL : /api/workordertask/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the WorkOrderTask. Param Type Description intWorkOrderID Integer The ID of the work order the task is part of. For getting possible values, please refer to the WorkOrder section. intTaskType Integer An integer representing the type of the task. Possible values are : 0 for General, 1 for Text Result, 2 for Meter Reading, and 3 for Inspection Task. strResult String In case of a Text Result task, a text explaining the output of the task. intAssetID Integer The ID of the asset the task should be executed on. For getting possible values, please refer to the Asset section. intOrder Integer An integer used for ordering the tasks inside the work order. dtmStartDate timestamp The date and time when the task is scheduled to be worked on. dtmDateCompleted timestamp The date and time when the task was completed. intCompletedByUserID Integer The ID of the user who competed the task. For getting possible values, please refer to the User section. intAssignedToUserID Integer The ID of the user the task is assigned to. For getting possible values, please refer to the User section. dblTimeSpentHours Double The actual hours that were spent on the task. intMeterReadingUnitID Double In case of a Meter Reading task, the ID of the unit used for the meter reading. For getting all possible values, please refer to the MeterReadingUnit section. strDescription String A short description of the task itself. strTaskNotesCompletion String This field can be used to store some notes upon the completion of the task. intTaskGroupControlID Integer An integer representing the id of the task group. intParentWorkOrderTaskID Integer An integer representing the id of the parent work order task. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed } Delete WorkOrderTask Delete a WorkOrderTask by Id URL : /api/workordertask/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the WorkOrderTask. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses : Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"WorkOrderTask"},{"location":"WorkOrderTask/index.html#create-workordertask","text":"A work order consists of a set of tasks that must be executed by some assigned users on a set of assets. This object represents those tasks. Create a WorkOrderTask if WorkOrderTask does not already exist. URL : /api/workordertask Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intWorkOrderID Integer The ID of the work order the task is part of. For getting possible values, please refer to the WorkOrder section. intTaskType Integer An integer representing the type of the task. Possible values are : 0 for General, 1 for Text Result, 2 for Meter Reading, and 3 for Inspection Task. strResult String In case of a Text Result task, a text explaining the output of the task. intAssetID Integer The ID of the asset the task should be executed on. For getting possible values, please refer to the Asset section. intOrder Integer An integer used for ordering the tasks inside the work order. dtmStartDate timestamp The date and time when the task is scheduled to be worked on. dtmDateCompleted timestamp The date and time when the task was completed. intCompletedByUserID Integer The ID of the user who competed the task. For getting possible values, please refer to the User section. intAssignedToUserID Integer The ID of the user the task is assigned to. For getting possible values, please refer to the User section. dblTimeSpentHours Double The actual hours that were spent on the task. intMeterReadingUnitID Double In case of a Meter Reading task, the ID of the unit used for the meter reading. For getting all possible values, please refer to the MeterReadingUnit section. strDescription String A short description of the task itself. strTaskNotesCompletion String This field can be used to store some notes upon the completion of the task. intTaskGroupControlID Integer An integer representing the id of the task group. intParentWorkOrderTaskID Integer An integer representing the id of the parent work order task. Success Response: Code : 200 success Resonse example { msg : Created successfully! , data : {id: 12 } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Create failed }","title":"Create WorkOrderTask"},{"location":"WorkOrderTask/index.html#read-all-workordertask-list","text":"Get the all registered WorkOrderTask list. URL : /api/workordertask Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response: Code : 200 success Resonse example { msg : Found! , data : [ { _id : 11 , intWorkOrderID : 1234, dtmDateCompleted : 2020-11-26T09:00:36.285+00:00, intCompletedByUserID : 9876, dblTimeSpentHours : 4, intMeterReadingUnitID : 9010, strTaskNotesCompletion : The meter reading is over 9000 , ... __v : 0 }, ... ] } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Read all WorkOrderTask list"},{"location":"WorkOrderTask/index.html#get-single-workordertask-by-id","text":"Get a single WorkOrderTask by id if current WorkOrderTask was registered on it. URL : /api/workordertask/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the WorkOrderTask. Success Response : Code : 200 success Resonse example { msg : Found! , data : { _id : 11, intWorkOrderID : 1234, dtmDateCompleted : 2020-11-26T09:00:36.285+00:00, intCompletedByUserID : 9876, dblTimeSpentHours : 4, intMeterReadingUnitID : 9010, strTaskNotesCompletion : The meter reading is over 9000 , ... } } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If workordertask does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null }","title":"Get Single WorkOrderTask By Id"},{"location":"WorkOrderTask/index.html#update-workordertask","text":"Update the WorkOrderTask by Id URL : /api/workordertask/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the WorkOrderTask. Param Type Description intWorkOrderID Integer The ID of the work order the task is part of. For getting possible values, please refer to the WorkOrder section. intTaskType Integer An integer representing the type of the task. Possible values are : 0 for General, 1 for Text Result, 2 for Meter Reading, and 3 for Inspection Task. strResult String In case of a Text Result task, a text explaining the output of the task. intAssetID Integer The ID of the asset the task should be executed on. For getting possible values, please refer to the Asset section. intOrder Integer An integer used for ordering the tasks inside the work order. dtmStartDate timestamp The date and time when the task is scheduled to be worked on. dtmDateCompleted timestamp The date and time when the task was completed. intCompletedByUserID Integer The ID of the user who competed the task. For getting possible values, please refer to the User section. intAssignedToUserID Integer The ID of the user the task is assigned to. For getting possible values, please refer to the User section. dblTimeSpentHours Double The actual hours that were spent on the task. intMeterReadingUnitID Double In case of a Meter Reading task, the ID of the unit used for the meter reading. For getting all possible values, please refer to the MeterReadingUnit section. strDescription String A short description of the task itself. strTaskNotesCompletion String This field can be used to store some notes upon the completion of the task. intTaskGroupControlID Integer An integer representing the id of the task group. intParentWorkOrderTaskID Integer An integer representing the id of the parent work order task. Success Response: Code : 200 success Resonse example { msg : Updated successfully! } Error Responses: Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Update WorkOrderTask"},{"location":"WorkOrderTask/index.html#delete-workordertask","text":"Delete a WorkOrderTask by Id URL : /api/workordertask/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the WorkOrderTask. Success Response: Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses : Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete WorkOrderTask"},{"location":"WorkOrderTask/creat_WorkOrderTask_api.html","text":"Create WorkOrderTask Api A work order consists of a set of tasks that must be executed by some assigned users on a set of assets. This object represents those tasks. Create a WorkOrderTask if WorkOrderTask does not already exist. URL : /api/workordertask Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intWorkOrderID Integer The ID of the work order the task is part of. For getting possible values, please refer to the WorkOrder section. intTaskType Integer An integer representing the type of the task. Possible values are : 0 for General, 1 for Text Result, 2 for Meter Reading, and 3 for Inspection Task. strResult String In case of a Text Result task, a text explaining the output of the task. intAssetID Integer The ID of the asset the task should be executed on. For getting possible values, please refer to the Asset section. intOrder Integer An integer used for ordering the tasks inside the work order. dtmStartDate timestamp The date and time when the task is scheduled to be worked on. dtmDateCompleted timestamp The date and time when the task was completed. intCompletedByUserID Integer The ID of the user who competed the task. For getting possible values, please refer to the User section. intAssignedToUserID Integer The ID of the user the task is assigned to. For getting possible values, please refer to the User section. dblTimeSpentHours Double The actual hours that were spent on the task. intMeterReadingUnitID Double In case of a Meter Reading task, the ID of the unit used for the meter reading. For getting all possible values, please refer to the MeterReadingUnit section. strDescription String A short description of the task itself. strTaskNotesCompletion String This field can be used to store some notes upon the completion of the task. intTaskGroupControlID Integer An integer representing the id of the task group. intParentWorkOrderTaskID Integer An integer representing the id of the parent work order task. Success Response Code : 200 success Resonse example { msg : Created successfully! , data : {id: 12 } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Create failed }","title":"Create WorkOrderTask Api"},{"location":"WorkOrderTask/creat_WorkOrderTask_api.html#create-workordertask-api","text":"A work order consists of a set of tasks that must be executed by some assigned users on a set of assets. This object represents those tasks. Create a WorkOrderTask if WorkOrderTask does not already exist. URL : /api/workordertask Method : POST Auth required : YES Header : Authorization:{jwt-token} Param Type Description intWorkOrderID Integer The ID of the work order the task is part of. For getting possible values, please refer to the WorkOrder section. intTaskType Integer An integer representing the type of the task. Possible values are : 0 for General, 1 for Text Result, 2 for Meter Reading, and 3 for Inspection Task. strResult String In case of a Text Result task, a text explaining the output of the task. intAssetID Integer The ID of the asset the task should be executed on. For getting possible values, please refer to the Asset section. intOrder Integer An integer used for ordering the tasks inside the work order. dtmStartDate timestamp The date and time when the task is scheduled to be worked on. dtmDateCompleted timestamp The date and time when the task was completed. intCompletedByUserID Integer The ID of the user who competed the task. For getting possible values, please refer to the User section. intAssignedToUserID Integer The ID of the user the task is assigned to. For getting possible values, please refer to the User section. dblTimeSpentHours Double The actual hours that were spent on the task. intMeterReadingUnitID Double In case of a Meter Reading task, the ID of the unit used for the meter reading. For getting all possible values, please refer to the MeterReadingUnit section. strDescription String A short description of the task itself. strTaskNotesCompletion String This field can be used to store some notes upon the completion of the task. intTaskGroupControlID Integer An integer representing the id of the task group. intParentWorkOrderTaskID Integer An integer representing the id of the parent work order task.","title":"Create WorkOrderTask Api"},{"location":"WorkOrderTask/creat_WorkOrderTask_api.html#success-response","text":"Code : 200 success Resonse example { msg : Created successfully! , data : {id: 12 } }","title":"Success Response"},{"location":"WorkOrderTask/creat_WorkOrderTask_api.html#error-responses","text":"Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : Create failed }","title":"Error Responses"},{"location":"WorkOrderTask/delete_WorkOrderTask_api.html","text":"Delete WorkOrderTask Api Delete a WorkOrderTask by Id URL : /api/workordertask/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the WorkOrderTask. Success Response Code : 200 success Resonse example { msg : Deleted successfully! , data: null } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Delete WorkOrderTask Api"},{"location":"WorkOrderTask/delete_WorkOrderTask_api.html#delete-workordertask-api","text":"Delete a WorkOrderTask by Id URL : /api/workordertask/:Id Method : DELETE Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the WorkOrderTask.","title":"Delete WorkOrderTask Api"},{"location":"WorkOrderTask/delete_WorkOrderTask_api.html#success-response","text":"Code : 200 success Resonse example { msg : Deleted successfully! , data: null }","title":"Success Response"},{"location":"WorkOrderTask/delete_WorkOrderTask_api.html#error-responses","text":"Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If there was no asset available to delete. Code : 400 BAD REQUEST Content example { msg : Delete failed , data :null }","title":"Error Responses"},{"location":"WorkOrderTask/get_WorkOrderTask_byId_Api.html","text":"Get Single WorkOrderTask By Id Api Get a single WorkOrderTask by id if current WorkOrderTask was registered on it. URL : /api/workordertask/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the WorkOrderTask. Success Response Code : 200 success Resonse example { msg : Found! , data : { _id : 11, intWorkOrderID : 1234, dtmDateCompleted : 2020-11-26T09:00:36.285+00:00, intCompletedByUserID : 9876, dblTimeSpentHours : 4, intMeterReadingUnitID : 9010, strTaskNotesCompletion : The meter reading is over 9000 , ... } } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Or Condition : If workordertask does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null }","title":"Get Single WorkOrderTask By Id Api"},{"location":"WorkOrderTask/get_WorkOrderTask_byId_Api.html#get-single-workordertask-by-id-api","text":"Get a single WorkOrderTask by id if current WorkOrderTask was registered on it. URL : /api/workordertask/:Id Method : GET Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the WorkOrderTask.","title":"Get Single WorkOrderTask By Id Api"},{"location":"WorkOrderTask/get_WorkOrderTask_byId_Api.html#success-response","text":"Code : 200 success Resonse example { msg : Found! , data : { _id : 11, intWorkOrderID : 1234, dtmDateCompleted : 2020-11-26T09:00:36.285+00:00, intCompletedByUserID : 9876, dblTimeSpentHours : 4, intMeterReadingUnitID : 9010, strTaskNotesCompletion : The meter reading is over 9000 , ... } }","title":"Success Response"},{"location":"WorkOrderTask/get_WorkOrderTask_byId_Api.html#error-responses","text":"Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null }","title":"Error Responses"},{"location":"WorkOrderTask/get_WorkOrderTask_byId_Api.html#or","text":"Condition : If workordertask does not exist on server. Code : 404 Not Found Content example { msg : Not found , data :null }","title":"Or"},{"location":"WorkOrderTask/read_all_WorkOrderTask_Api.html","text":"Read all WorkOrderTask list Api Get the all registered WorkOrderTask list. URL : /api/workordertask Method : GET Auth required : YES Header : Authorization:{jwt-token} Success Response Code : 200 success Resonse example { msg : Found! , data : [ { _id : 11 , intWorkOrderID : 1234, dtmDateCompleted : 2020-11-26T09:00:36.285+00:00, intCompletedByUserID : 9876, dblTimeSpentHours : 4, intMeterReadingUnitID : 9010, strTaskNotesCompletion : The meter reading is over 9000 , ... __v : 0 }, ... ] } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Read all WorkOrderTask list Api"},{"location":"WorkOrderTask/read_all_WorkOrderTask_Api.html#read-all-workordertask-list-api","text":"Get the all registered WorkOrderTask list. URL : /api/workordertask Method : GET Auth required : YES Header : Authorization:{jwt-token}","title":"Read all WorkOrderTask list Api"},{"location":"WorkOrderTask/read_all_WorkOrderTask_Api.html#success-response","text":"Code : 200 success Resonse example { msg : Found! , data : [ { _id : 11 , intWorkOrderID : 1234, dtmDateCompleted : 2020-11-26T09:00:36.285+00:00, intCompletedByUserID : 9876, dblTimeSpentHours : 4, intMeterReadingUnitID : 9010, strTaskNotesCompletion : The meter reading is over 9000 , ... __v : 0 }, ... ] }","title":"Success Response"},{"location":"WorkOrderTask/read_all_WorkOrderTask_Api.html#error-responses","text":"Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : Internal Server Error. Code : 500 Resonse example { msg : Internal Server error }","title":"Error Responses"},{"location":"WorkOrderTask/update_WorkOrderTask_byId_Api.html","text":"Update WorkOrderTask Api Update the WorkOrderTask by Id URL : /api/workordertask/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the WorkOrderTask. Param Type Description intWorkOrderID Integer The ID of the work order the task is part of. For getting possible values, please refer to the WorkOrder section. intTaskType Integer An integer representing the type of the task. Possible values are : 0 for General, 1 for Text Result, 2 for Meter Reading, and 3 for Inspection Task. strResult String In case of a Text Result task, a text explaining the output of the task. intAssetID Integer The ID of the asset the task should be executed on. For getting possible values, please refer to the Asset section. intOrder Integer An integer used for ordering the tasks inside the work order. dtmStartDate timestamp The date and time when the task is scheduled to be worked on. dtmDateCompleted timestamp The date and time when the task was completed. intCompletedByUserID Integer The ID of the user who competed the task. For getting possible values, please refer to the User section. intAssignedToUserID Integer The ID of the user the task is assigned to. For getting possible values, please refer to the User section. dblTimeSpentHours Double The actual hours that were spent on the task. intMeterReadingUnitID Double In case of a Meter Reading task, the ID of the unit used for the meter reading. For getting all possible values, please refer to the MeterReadingUnit section. strDescription String A short description of the task itself. strTaskNotesCompletion String This field can be used to store some notes upon the completion of the task. intTaskGroupControlID Integer An integer representing the id of the task group. intParentWorkOrderTaskID Integer An integer representing the id of the parent work order task. Success Response Code : 200 success Resonse example { msg : Updated successfully! } Error Responses Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Update WorkOrderTask Api"},{"location":"WorkOrderTask/update_WorkOrderTask_byId_Api.html#update-workordertask-api","text":"Update the WorkOrderTask by Id URL : /api/workordertask/:Id Method : PUT Auth required : YES Header : Authorization:{jwt-token} URL Parameters : An integer that uniquely identifies the WorkOrderTask. Param Type Description intWorkOrderID Integer The ID of the work order the task is part of. For getting possible values, please refer to the WorkOrder section. intTaskType Integer An integer representing the type of the task. Possible values are : 0 for General, 1 for Text Result, 2 for Meter Reading, and 3 for Inspection Task. strResult String In case of a Text Result task, a text explaining the output of the task. intAssetID Integer The ID of the asset the task should be executed on. For getting possible values, please refer to the Asset section. intOrder Integer An integer used for ordering the tasks inside the work order. dtmStartDate timestamp The date and time when the task is scheduled to be worked on. dtmDateCompleted timestamp The date and time when the task was completed. intCompletedByUserID Integer The ID of the user who competed the task. For getting possible values, please refer to the User section. intAssignedToUserID Integer The ID of the user the task is assigned to. For getting possible values, please refer to the User section. dblTimeSpentHours Double The actual hours that were spent on the task. intMeterReadingUnitID Double In case of a Meter Reading task, the ID of the unit used for the meter reading. For getting all possible values, please refer to the MeterReadingUnit section. strDescription String A short description of the task itself. strTaskNotesCompletion String This field can be used to store some notes upon the completion of the task. intTaskGroupControlID Integer An integer representing the id of the task group. intParentWorkOrderTaskID Integer An integer representing the id of the parent work order task.","title":"Update WorkOrderTask Api"},{"location":"WorkOrderTask/update_WorkOrderTask_byId_Api.html#success-response","text":"Code : 200 success Resonse example { msg : Updated successfully! }","title":"Success Response"},{"location":"WorkOrderTask/update_WorkOrderTask_byId_Api.html#error-responses","text":"Code : 401 Unauthorized Condition : Missing or incorrect authentication credentials and expired one. Resonse example { msg : JWT token varified failed! , data :null } { msg : JWT token expired! , data :null } Condition : If fields are missed or put the wrong type of value. Code : 400 BAD REQUEST Content example { msg : update failed }","title":"Error Responses"}]}